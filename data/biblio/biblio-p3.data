d:p3001r0
P3001R0


std::hive and containers like it are not a good fit for the standard library
https://wg21.link/p3001r0




Jonathan Müller, Zach Laine, Bryce Adelstein Lelbach, David Sankel
-
d:p3002r0
P3002R0


Guidelines for allocators in new library classes
https://wg21.link/p3002r0




Pablo Halpern
-
d:p3002r1
P3002R1


Policies for Using Allocators in New Library Classes
https://wg21.link/p3002r1




Pablo Halpern
-
d:p3003r0
P3003R0


The design of a library of number concepts
https://wg21.link/p3003r0




Johel Ernesto Guerrero Peña
-
d:p3004r0
P3004R0


Principled Design for WG21
https://wg21.link/p3004r0




John Lakos, Harold Bott, Mungo Gill, Lori Hughes, Alisdair Meredith, Bill Chapman, Mike Giroux, Oleg Subbotin
-
d:p3005r0
P3005R0


Memorializing Principled-Design Policies for WG21
https://wg21.link/p3005r0




John Lakos, Harold Bott, Bill Chapman, Mungo Gill, Mike Giroux, Alisdair Meredith, Oleg Subbotin
-
d:p3006r0
P3006R0


Launder less
https://wg21.link/p3006r0




Antony Polukhin
-
d:p3006r1
P3006R1


Launder less
https://wg21.link/p3006r1




Antony Polukhin
-
d:p3007r0
P3007R0


Return object semantics in postconditions
https://wg21.link/p3007r0




Timur Doumler, Andrzej Krzemieński, Joshua Berne
-
d:p3008r0
P3008R0


Atomic floating-point min/max
https://wg21.link/p3008r0




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r1
P3008R1


Atomic floating-point min/max
https://wg21.link/p3008r1




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r2
P3008R2


Atomic floating-point min/max
https://wg21.link/p3008r2




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r3
P3008R3


Atomic floating-point min/max
https://wg21.link/p3008r3




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r4
P3008R4


Atomic floating-point min/max
https://wg21.link/p3008r4




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r5
P3008R5


Atomic floating-point min/max
https://wg21.link/p3008r5




Gonzalo Brito Gadeschi, David Sankel
-
d:p3008r6
P3008R6


Atomic floating-point min/max
https://wg21.link/p3008r6




Gonzalo Brito Gadeschi, David Sankel
-
d:p3009r0
P3009R0


Injected class name in the base specifier list
https://wg21.link/p3009r0




Joe Jevnik
-
d:p3010r0
P3010R0


Using Reflection to Replace a Metalanguage for Generating JS Bindings
https://wg21.link/p3010r0




Dan Katz
-
d:p3011r0
P3011R0


Supporting document for Hive proposal #1: outreach for evidence of container-style use in industry
https://wg21.link/p3011r0




Matt Bentley
-
d:p3012r0
P3012R0


Supporting document for Hive proposal #2: use of std::list in open source codebases
https://wg21.link/p3012r0




Matt Bentley
-
d:p3014r0
P3014R0


Customizing std::expected's exception
https://wg21.link/p3014r0




Jonathan Müller
-
d:p3015r0
P3015R0


Rebuttal to Additional format specifiers for time_point
https://wg21.link/p3015r0




Howard Hinnant
-
d:p3016r0
P3016R0


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r0




Arthur O'Dwyer
-
d:p3016r1
P3016R1


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r1




Arthur O'Dwyer
-
d:p3016r2
P3016R2


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r2




Arthur O'Dwyer
-
d:p3016r3
P3016R3


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r3




Arthur O'Dwyer
-
d:p3016r4
P3016R4


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r4




Arthur O'Dwyer
-
d:p3016r5
P3016R5


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r5




Arthur O'Dwyer
-
d:p3016r6
P3016R6


Resolve inconsistencies in begin/end for valarray and braced initializer lists
https://wg21.link/p3016r6




Arthur O'Dwyer
-
d:p3018r0
P3018R0


Low-Level Integer Arithmetic
https://wg21.link/p3018r0




Andreas Weis
-
d:p3019r0
P3019R0


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r0




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r1
P3019R1


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r1




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r10
P3019R10


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r10




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r11
P3019R11


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r11




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r12
P3019R12


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r12




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r13
P3019R13


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r13




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r14
P3019R14


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r14




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r2
P3019R2


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r2




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r3
P3019R3


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r3




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r4
P3019R4


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r4




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r5
P3019R5


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r5




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r6
P3019R6


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r6




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r7
P3019R7


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r7




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r8
P3019R8


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r8




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3019r9
P3019R9


Vocabulary Types for Composite Class Design
https://wg21.link/p3019r9




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3020r0
P3020R0


2023-09 Library Evolution Poll Outcomes
https://wg21.link/p3020r0




Inbal Levi, Fabio Fracassi, Ben Craig, Billy Baker, Nevin Liber, Corentin Jabot
-
d:p3021r0
P3021R0


Unified function call syntax (UFCS)
https://wg21.link/p3021r0




Herb Sutter
-
d:p3022r0
P3022R0


A Boring Thread Attributes Interface
https://wg21.link/p3022r0




David Sankel, Darius Neațu
-
d:p3022r1
P3022R1


A Boring Thread Attributes Interface
https://wg21.link/p3022r1




David Sankel, Darius Neațu
-
d:p3023r0
P3023R0


C++ Should Be C++
https://wg21.link/p3023r0




David Sankel
-
d:p3023r1
P3023R1


C++ Should Be C++
https://wg21.link/p3023r1




David Sankel
-
d:p3024r0
P3024R0


Interface Directions for std::simd
https://wg21.link/p3024r0




David Sankel, Jeff Garland, Matthias Kretz, Ruslan Arutyunyan
-
d:p3025r0
P3025R0


SG14: Low Latency/Games/Embedded/Financial trading/Simulation virtual Minutes to 2023/09/12
https://wg21.link/p3025r0




Michael Wong
-
d:p3026r0
P3026R0


SG19: Machine Learning virtual Meeting Minutes to 2023/07/13
https://wg21.link/p3026r0




Michael Wong
-
d:p3027r0
P3027R0


UFCS is a breaking change, of the absolutely worst kind
https://wg21.link/p3027r0




Ville Voutilainen
-
d:p3028r0
P3028R0


An Overview of Syntax Choices for Contracts
https://wg21.link/p3028r0




Joshua Berne, Gašper Ažman, Rostislav Khlebnikov, Timur Doumler
-
d:p3029r0
P3029R0


Better mdspan's CTAD
https://wg21.link/p3029r0




Hewill Kang
-
d:p3029r1
P3029R1


Better mdspan's CTAD
https://wg21.link/p3029r1




Hewill Kang
-
d:p3031r0
P3031R0


Resolve CWG2561: conversion function for lambda with explicit object parameter
https://wg21.link/p3031r0




Arthur O'Dwyer
-
d:p3032r0
P3032R0


Less transient constexpr allocation
https://wg21.link/p3032r0




Barry Revzin
-
d:p3032r1
P3032R1


Less transient constexpr allocation
https://wg21.link/p3032r1




Barry Revzin
-
d:p3032r2
P3032R2


Less transient constexpr allocation
https://wg21.link/p3032r2




Barry Revzin
-
d:p3033r0
P3033R0


Should we import function bodies to get the better optimizations?
https://wg21.link/p3033r0




Chuanqi Xu
-
d:p3034r0
P3034R0


Module Declarations Shouldn't be Macros
https://wg21.link/p3034r0




Michael Spencer
-
d:p3034r1
P3034R1


Module Declarations Shouldn't be Macros
https://wg21.link/p3034r1




Michael Spencer
-
d:p3037r0
P3037R0


constexpr std::shared_ptr
https://wg21.link/p3037r0




Paul Keir
-
d:p3037r1
P3037R1


constexpr std::shared_ptr
https://wg21.link/p3037r1




Paul Keir
-
d:p3037r2
P3037R2


constexpr std::shared_ptr
https://wg21.link/p3037r2




Paul Keir
-
d:p3037r3
P3037R3


constexpr std::shared_ptr
https://wg21.link/p3037r3




Paul Keir
-
d:p3037r4
P3037R4


constexpr std::shared_ptr
https://wg21.link/p3037r4




Paul Keir
-
d:p3037r5
P3037R5


constexpr std::shared_ptr and friends
https://wg21.link/p3037r5




Paul Keir, Hana Dusíková
-
d:p3037r6
P3037R6


constexpr std::shared_ptr and friends
https://wg21.link/p3037r6




Paul Keir, Hana Dusíková
-
d:p3038r0
P3038R0


Concrete suggestions for initial Profiles
https://wg21.link/p3038r0




Bjarne Stroustrup
-
d:p3039r0
P3039R0


Automatically Generate `operator->`
https://wg21.link/p3039r0




David Stone
-
d:p3040r0
P3040R0


C++ Standard Library Ready Issues to be moved in Kona, Nov. 2023
https://wg21.link/p3040r0




Jonathan Wakely
-
d:p3041r0
P3041R0


Transitioning from "#include" World to Modules
https://wg21.link/p3041r0




Gabriel Dos Reis
-
d:p3042r0
P3042R0


Vocabulary Types for Composite Class Design
https://wg21.link/p3042r0




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3043r0
P3043R0


Slides: Using variable template template without meta programming
https://wg21.link/p3043r0




Zhihao Yuan
-
d:p3044r0
P3044R0


sub-string_view from string
https://wg21.link/p3044r0




Michael Florian Hava
-
d:p3044r1
P3044R1


sub-string_view from string
https://wg21.link/p3044r1




Michael Florian Hava
-
d:p3044r2
P3044R2


sub-string_view from string
https://wg21.link/p3044r2




Michael Florian Hava
-
d:p3045r0
P3045R0


Quantities and units library
https://wg21.link/p3045r0




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r1
P3045R1


Quantities and units library
https://wg21.link/p3045r1




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r2
P3045R2


Quantities and units library
https://wg21.link/p3045r2




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r3
P3045R3


Quantities and units library
https://wg21.link/p3045r3




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r4
P3045R4


Quantities and units library
https://wg21.link/p3045r4




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r5
P3045R5


Quantities and units library
https://wg21.link/p3045r5




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3045r6
P3045R6


Quantities and units library
https://wg21.link/p3045r6




Mateusz Pusz, Dominik Berner, Johel Ernesto Guerrero Peña, Charles Hogg, Nicolas Holthaus, Roth Michaels, Vincent Reverdy
-
d:p3046r0
P3046R0


Core Language Working Group "ready" Issues for the November, 2023 meeting
https://wg21.link/p3046r0




Jens Maurer
-
d:p3047r0
P3047R0


Remove deprecated namespace `relops` from C++26
https://wg21.link/p3047r0




Alisdair Meredith
-
d:p3049r0
P3049R0


node-handles for lists
https://wg21.link/p3049r0




Michael Florian Hava
-
d:p3049r1
P3049R1


node-handles for lists
https://wg21.link/p3049r1




Michael Florian Hava
-
d:p3050r0
P3050R0


Optimize linalg::conjugated for noncomplex value types
https://wg21.link/p3050r0




Mark Hoemmen
-
d:p3050r1
P3050R1


Fix C++26 by optimizing linalg::conjugated for noncomplex value types
https://wg21.link/p3050r1




Mark Hoemmen
-
d:p3050r2
P3050R2


Fix C++26 by optimizing linalg::conjugated for noncomplex value types
https://wg21.link/p3050r2




Mark Hoemmen
-
d:p3050r3
P3050R3


Fix C++26 by optimizing linalg::conjugated for noncomplex value types
https://wg21.link/p3050r3




Mark Hoemmen
-
d:p3051r0
P3051R0


Structured Response Files
https://wg21.link/p3051r0




René Ferdinand Rivera Morell
-
d:p3051r1
P3051R1


Structured Response Files
https://wg21.link/p3051r1




René Ferdinand Rivera Morell
-
d:p3051r2
P3051R2


Structured Response Files
https://wg21.link/p3051r2




René Ferdinand Rivera Morell
-
d:p3051r3
P3051R3


WITHDRAWN: Structured Response Files
https://wg21.link/p3051r3




René Ferdinand Rivera Morell
-
d:p3052r0
P3052R0


view_interface::at()
https://wg21.link/p3052r0




Hewill Kang
-
d:p3052r1
P3052R1


view_interface::at()
https://wg21.link/p3052r1




Hewill Kang
-
d:p3053r0
P3053R0


2023-12 Library Evolution Polls
https://wg21.link/p3053r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3054r0
P3054R0


2023-12 Library Evolution Poll Outcomes
https://wg21.link/p3054r0




Inbal Levi, Fabio Fracassi, Ben Craig, Billy Baker, Nevin Liber, Corentin Jabot
-
d:p3055r0
P3055R0


Relax wording to permit relocation optimizations in the STL
https://wg21.link/p3055r0




Arthur O'Dwyer
-
d:p3055r1
P3055R1


Relax wording to permit relocation optimizations in the STL
https://wg21.link/p3055r1




Arthur O'Dwyer
-
d:p3056r0
P3056R0


what ostream exception
https://wg21.link/p3056r0




Jarrad J. Waterloo
-
d:p3057r0
P3057R0


Two finer-grained compilation model for named modules
https://wg21.link/p3057r0




Chuanqi Xu
-
d:p3059r0
P3059R0


Making user-defined constructors of view iterators/sentinels private
https://wg21.link/p3059r0




Hewill Kang
-
d:p3059r1
P3059R1


Making user-defined constructors of view iterators/sentinels private
https://wg21.link/p3059r1




Hewill Kang
-
d:p3060r0
P3060R0


Add std::ranges::upto(n)
https://wg21.link/p3060r0




Weile Wei
-
d:p3060r1
P3060R1


Add std::views::upto(n)
https://wg21.link/p3060r1




Weile Wei, Zhihao Yuan
-
d:p3060r2
P3060R2


Add std::views::indices(n)
https://wg21.link/p3060r2




Weile Wei, Zhihao Yuan
-
d:p3060r3
P3060R3


Add std::views::indices(n)
https://wg21.link/p3060r3




Weile Wei, Zhihao Yuan
-
d:p3061r0
P3061R0


WG21 2023-11 Kona Record of Discussion
https://wg21.link/p3061r0




Nina Ranns
-
d:p3062r0
P3062R0


C++ Should Be C++ - Presentation
https://wg21.link/p3062r0




David Sankel
-
d:p3064r0
P3064R0


How to Avoid OOTA Without Really Trying
https://wg21.link/p3064r0




Paul E. McKenney, Alan Stern, Michael Wong, and Maged Michael
-
d:p3064r1
P3064R1


How to Avoid OOTA Without Really Trying
https://wg21.link/p3064r1




Paul E. McKenney, Alan Stern, Michael Wong, and Maged Michael
-
d:p3064r2
P3064R2


How to Avoid OOTA Without Really Trying
https://wg21.link/p3064r2




Paul E. McKenney, Alan Stern, Michael Wong, and Maged Michael
-
d:p3066r0
P3066R0


Allow repeating contract annotations on non-first declarations
https://wg21.link/p3066r0




Timur Doumler
-
d:p3067r0
P3067R0


Provide predefined simd permute generator functions for common operations
https://wg21.link/p3067r0




Daniel Towner
-
d:p3068r0
P3068R0


Allowing exception throwing in constant-evaluation.
https://wg21.link/p3068r0




Hana Dusíková
-
d:p3068r1
P3068R1


Allowing exception throwing in constant-evaluation.
https://wg21.link/p3068r1




Hana Dusíková
-
d:p3068r2
P3068R2


Allowing exception throwing in constant-evaluation
https://wg21.link/p3068r2




Hana Dusíková
-
d:p3068r3
P3068R3


Allowing exception throwing in constant-evaluation
https://wg21.link/p3068r3




Hana Dusíková
-
d:p3068r4
P3068R4


Allowing exception throwing in constant-evaluation
https://wg21.link/p3068r4




Hana Dusíková
-
d:p3068r5
P3068R5


Allowing exception throwing in constant-evaluation
https://wg21.link/p3068r5




Hana Dusíková
-
d:p3068r6
P3068R6


Allowing exception throwing in constant-evaluation
https://wg21.link/p3068r6




Hana Dusíková
-
d:p3070r0
P3070R0


Formatting enums
https://wg21.link/p3070r0




Victor Zverovich
-
d:p3070r1
P3070R1


Formatting enums
https://wg21.link/p3070r1




Victor Zverovich
-
d:p3070r2
P3070R2


Formatting enums
https://wg21.link/p3070r2




Victor Zverovich
-
d:p3070r3
P3070R3


Formatting enums
https://wg21.link/p3070r3




Victor Zverovich
-
d:p3071r0
P3071R0


Protection against modifications in contracts
https://wg21.link/p3071r0




Jens Maurer
-
d:p3071r1
P3071R1


Protection against modifications in contracts
https://wg21.link/p3071r1




Jens Maurer
-
d:p3072r0
P3072R0


Hassle-free thread attributes
https://wg21.link/p3072r0




Zhihao Yuan
-
d:p3072r1
P3072R1


Hassle-free thread attributes
https://wg21.link/p3072r1




Zhihao Yuan
-
d:p3072r2
P3072R2


Hassle-free thread attributes
https://wg21.link/p3072r2




Zhihao Yuan
-
d:p3073r0
P3073R0


Remove evaluation_undefined_behavior and will_continue from the Contracts MVP
https://wg21.link/p3073r0




Timur Doumler, Ville Voutilainen
-
d:p3074r0
P3074R0


constexpr union lifetime
https://wg21.link/p3074r0




Barry Revzin
-
d:p3074r1
P3074R1


std::uninitialized<T>
https://wg21.link/p3074r1




Barry Revzin
-
d:p3074r2
P3074R2


std::uninitialized<T>
https://wg21.link/p3074r2




Barry Revzin
-
d:p3074r3
P3074R3


trivial union (was std::uninitialized<T>)
https://wg21.link/p3074r3




Barry Revzin
-
d:p3074r4
P3074R4


trivial unions (was std::uninitialized<T>)
https://wg21.link/p3074r4




Barry Revzin
-
d:p3074r5
P3074R5


trivial unions (was std::uninitialized<T>)
https://wg21.link/p3074r5




Barry Revzin
-
d:p3074r6
P3074R6


trivial unions (was std::uninitialized<T>)
https://wg21.link/p3074r6




Barry Revzin
-
d:p3074r7
P3074R7


trivial unions (was std::uninitialized<T>)
https://wg21.link/p3074r7




Barry Revzin
-
d:p3075r0
P3075R0


Adding an Undefined Behavior and IFNDR Annex
https://wg21.link/p3075r0




Shafik Yaghmour
-
d:p3079r0
P3079R0


Should ignore and observe exist for constant evaluation of contracts?
https://wg21.link/p3079r0




Oliver Rosten
-
d:p3081r0
P3081R0


Core safety Profiles: Specification, adoptability, and impact
https://wg21.link/p3081r0




Herb Sutter
-
d:p3081r1
P3081R1


Core safety profiles for C++26
https://wg21.link/p3081r1




Herb Sutter
-
d:p3081r2
P3081R2


Core safety profiles for C++26
https://wg21.link/p3081r2




Herb Sutter
-
d:p3084r0
P3084R0


Slides for LEWG views::maybe 20240109
https://wg21.link/p3084r0




Steve Downey
-
d:p3085r0
P3085R0


`noexcept` policy for SD-9 (throws nothing)
https://wg21.link/p3085r0




Ben Craig
-
d:p3085r1
P3085R1


`noexcept` policy for SD-9 (throws nothing)
https://wg21.link/p3085r1




Ben Craig
-
d:p3085r2
P3085R2


`noexcept` policy for SD-9 (throws nothing)
https://wg21.link/p3085r2




Ben Craig
-
d:p3085r3
P3085R3


`noexcept` policy for SD-9 (throws nothing)
https://wg21.link/p3085r3




Ben Craig
-
d:p3086r0
P3086R0


Proxy: A Pointer-Semantics-Based Polymorphism Library
https://wg21.link/p3086r0




Mingxin Wang
-
d:p3086r1
P3086R1


Proxy: A Pointer-Semantics-Based Polymorphism Library
https://wg21.link/p3086r1




Mingxin Wang
-
d:p3086r2
P3086R2


Proxy: A Pointer-Semantics-Based Polymorphism Library
https://wg21.link/p3086r2




Mingxin Wang
-
d:p3086r3
P3086R3


Proxy: A Pointer-Semantics-Based Polymorphism Library
https://wg21.link/p3086r3




Mingxin Wang
-
d:p3086r4
P3086R4


Proxy: A Pointer-Semantics-Based Polymorphism Library
https://wg21.link/p3086r4




Mingxin Wang
-
d:p3087r0
P3087R0


Make direct-initialization for enumeration types at least as permissive as direct-list-initialization
https://wg21.link/p3087r0




Jan Schultke
-
d:p3087r1
P3087R1


Make direct-initialization for enumeration types at least as permissive as direct-list-initializatio
https://wg21.link/p3087r1




Jan Schultke
-
d:p3088r0
P3088R0


Attributes for contract assertions
https://wg21.link/p3088r0




Timur Doumler, Joshua Berne
-
d:p3088r1
P3088R1


Attributes for contract assertions
https://wg21.link/p3088r1




Timur Doumler, Joshua Berne
-
d:p3090r0
P3090R0


std::execution Introduction
https://wg21.link/p3090r0




Inbal Levi, Eric Niebler
-
d:p3091r0
P3091R0


Better lookups for `map` and `unordered_map`
https://wg21.link/p3091r0




Pablo Halpern
-
d:p3091r1
P3091R1


Better lookups for `map` and `unordered_map`
https://wg21.link/p3091r1




Pablo Halpern
-
d:p3091r2
P3091R2


Better lookups for `map` and `unordered_map`
https://wg21.link/p3091r2




Pablo Halpern
-
d:p3091r3
P3091R3


Better lookups for `map` and `unordered_map`
https://wg21.link/p3091r3




Pablo Halpern
-
d:p3091r4
P3091R4


Better lookups for `map` , `unordered_map`, and `flat_map`
https://wg21.link/p3091r4




Pablo Halpern
-
d:p3092r0
P3092R0


Modules ABI requirement
https://wg21.link/p3092r0




Chuanqi Xu
-
d:p3093r0
P3093R0


Attributes on expressions
https://wg21.link/p3093r0




Giuseppe D'Angelo
-
d:p3094r0
P3094R0


std::basic_fixed_string
https://wg21.link/p3094r0




Mateusz Pusz
-
d:p3094r1
P3094R1


std::basic_fixed_string
https://wg21.link/p3094r1




Mateusz Pusz
-
d:p3094r2
P3094R2


std::basic_fixed_string
https://wg21.link/p3094r2




Mateusz Pusz
-
d:p3094r3
P3094R3


std::basic_fixed_string
https://wg21.link/p3094r3




Mateusz Pusz
-
d:p3094r4
P3094R4


std::basic_fixed_string
https://wg21.link/p3094r4




Mateusz Pusz
-
d:p3094r5
P3094R5


std::basic_fixed_string
https://wg21.link/p3094r5




Mateusz Pusz
-
d:p3094r6
P3094R6


std::basic_fixed_string
https://wg21.link/p3094r6




Mateusz Pusz
-
d:p3095r0
P3095R0


ABI comparison with reflection
https://wg21.link/p3095r0




Saksham Sharma
-
d:p3096r0
P3096R0


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r0




Adam Lach, Walter Genovese
-
d:p3096r1
P3096R1


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r1




Adam Lach, Walter Genovese
-
d:p3096r10
P3096R10


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r10




Adam Lach, Walter Genovese
-
d:p3096r11
P3096R11


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r11




Adam Lach, Walter Genovese
-
d:p3096r12
P3096R12


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r12




Adam Lach, Walter Genovese
-
d:p3096r2
P3096R2


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r2




Adam Lach, Walter Genovese
-
d:p3096r3
P3096R3


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r3




Adam Lach, Walter Genovese
-
d:p3096r4
P3096R4


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r4




Adam Lach, Walter Genovese
-
d:p3096r5
P3096R5


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r5




Adam Lach, Walter Genovese
-
d:p3096r6
P3096R6


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r6




Adam Lach, Walter Genovese
-
d:p3096r7
P3096R7


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r7




Adam Lach, Walter Genovese
-
d:p3096r8
P3096R8


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r8




Adam Lach, Walter Genovese
-
d:p3096r9
P3096R9


Function Parameter Reflection in Reflection for C++26
https://wg21.link/p3096r9




Adam Lach, Walter Genovese
-
d:p3097r0
P3097R0


Contracts for C++: Support for virtual functions
https://wg21.link/p3097r0




Timur Doumler, Joshua Berne, Gašper Ažman
-
d:p3098r0
P3098R0


Contracts for C++: Postcondition captures
https://wg21.link/p3098r0




Timur Doumler, Gašper Ažman, Joshua Berne
-
d:p3098r1
P3098R1


Contracts for C++: Postcondition captures
https://wg21.link/p3098r1




Timur Doumler, Gašper Ažman, Joshua Berne
-
d:p3100r0
P3100R0


Undefined and erroneous behaviour are contract violations
https://wg21.link/p3100r0




Timur Doumler, Gašper Ažman, Joshua Berne
-
d:p3100r1
P3100R1


Undefined and erroneous behaviour are contract violations
https://wg21.link/p3100r1




Timur Doumler, Gašper Ažman, Joshua Berne
-
d:p3100r2
P3100R2


Implicit contract assertions
https://wg21.link/p3100r2




Timur Doumler, Joshua Berne
-
d:p3100r3
P3100R3


Implicit contract assertions
https://wg21.link/p3100r3




Timur Doumler, Joshua Berne
-
d:p3100r4
P3100R4


Implicit contract assertions
https://wg21.link/p3100r4




Timur Doumler, Joshua Berne
-
d:p3101r0
P3101R0


Differentiating potentially throwing and nonthrowing violation handlers
https://wg21.link/p3101r0




Ran Regev, Gašper Ažman
-
d:p3102r0
P3102R0


Refining Contract Violation Detection Modes
https://wg21.link/p3102r0




Joshua Berne
-
d:p3103r0
P3103R0


More bitset operations
https://wg21.link/p3103r0




Jan Schultke
-
d:p3103r1
P3103R1


More bitset operations
https://wg21.link/p3103r1




Jan Schultke
-
d:p3103r2
P3103R2


More bitset operations
https://wg21.link/p3103r2




Jan Schultke
-
d:p3104r0
P3104R0


Bit permutations
https://wg21.link/p3104r0




Jan Schultke
-
d:p3104r1
P3104R1


Bit permutations
https://wg21.link/p3104r1




Jan Schultke
-
d:p3104r2
P3104R2


Bit permutations
https://wg21.link/p3104r2




Jan Schultke
-
d:p3104r3
P3104R3


Bit permutations
https://wg21.link/p3104r3




Jan Schultke
-
d:p3104r4
P3104R4


Bit permutations
https://wg21.link/p3104r4




Jan Schultke
-
d:p3105r0
P3105R0


constexpr std::uncaught_exceptions()
https://wg21.link/p3105r0




Jan Schultke
-
d:p3105r1
P3105R1


constexpr std::uncaught_exceptions()
https://wg21.link/p3105r1




Jan Schultke
-
d:p3105r2
P3105R2


constexpr std::uncaught_exceptions()
https://wg21.link/p3105r2




Jan Schultke
-
d:p3106r0
P3106R0


Clarifying rules for brace elision in aggregate initialization
https://wg21.link/p3106r0




James Touton
-
d:p3106r1
P3106R1


Clarifying rules for brace elision in aggregate initialization
https://wg21.link/p3106r1




James Touton
-
d:p3107r0
P3107R0


Permit an efficient implementation of std::print
https://wg21.link/p3107r0




Victor Zverovich
-
d:p3107r1
P3107R1


Permit an efficient implementation of std::print
https://wg21.link/p3107r1




Victor Zverovich
-
d:p3107r2
P3107R2


Permit an efficient implementation of std::print
https://wg21.link/p3107r2




Victor Zverovich
-
d:p3107r3
P3107R3


Permit an efficient implementation of std::print
https://wg21.link/p3107r3




Victor Zverovich
-
d:p3107r4
P3107R4


Permit an efficient implementation of std::print
https://wg21.link/p3107r4




Victor Zverovich
-
d:p3107r5
P3107R5


Permit an efficient implementation of std::print
https://wg21.link/p3107r5




Victor Zverovich
-
d:p3109r0
P3109R0


A plan for std::execution for C++26
https://wg21.link/p3109r0




Lewis Baker, Eric Niebler, Kirk Shoop, Lucian Radu
-
d:p3110r0
P3110R0


Array element initialization via pattern expansion
https://wg21.link/p3110r0




James Touton
-
d:p3111r0
P3111R0


Atomic Reduction Operations
https://wg21.link/p3111r0




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r1
P3111R1


Atomic Reduction Operations
https://wg21.link/p3111r1




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r2
P3111R2


Atomic Reduction Operations
https://wg21.link/p3111r2




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r3
P3111R3


Atomic Reduction Operations
https://wg21.link/p3111r3




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r4
P3111R4


Atomic Reduction Operations
https://wg21.link/p3111r4




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r5
P3111R5


Atomic Reduction Operations
https://wg21.link/p3111r5




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r6
P3111R6


Atomic Reduction Operations
https://wg21.link/p3111r6




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r7
P3111R7


Atomic Reduction Operations
https://wg21.link/p3111r7




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3111r8
P3111R8


Atomic Reduction Operations
https://wg21.link/p3111r8




Gonzalo Brito Gadeschi, Simon Cooksey, Daniel Lustig
-
d:p3112r0
P3112R0


Specify Constructor of std::nullopt_t
https://wg21.link/p3112r0




Brian Bi
-
d:p3113r0
P3113R0


Slides: Contract assertions, the noexcept operator, and deduced exception specifications
https://wg21.link/p3113r0




Timur Doumler
-
d:p3114r0
P3114R0


noexcept(contract_assert(_)) — slides
https://wg21.link/p3114r0




Andrzej Krzemieński
-
d:p3115r0
P3115R0


Data Member, Variable and Alias Declarations Can Introduce A Pack
https://wg21.link/p3115r0




Corentin Jabot
-
d:p3116r0
P3116R0


Policy for explicit
https://wg21.link/p3116r0




Zach Laine
-
d:p3117r0
P3117R0


Extending Conditionally Borrowed
https://wg21.link/p3117r0




Zach Laine, Barry Revzin
-
d:p3117r1
P3117R1


Extending Conditionally Borrowed
https://wg21.link/p3117r1




Zach Laine, Barry Revzin, Jonathan Müller
-
d:p3119r0
P3119R0


Tokyo Technical Fixes to Contracts
https://wg21.link/p3119r0




Joshua Berne
-
d:p3119r1
P3119R1


Tokyo Technical Fixes to Contracts
https://wg21.link/p3119r1




Joshua Berne
-
d:p3122r0
P3122R0


[[nodiscard]] should be Recommended Practice
https://wg21.link/p3122r0




Jonathan Wakely
-
d:p3122r1
P3122R1


[[nodiscard]] should be Recommended Practice
https://wg21.link/p3122r1




Jonathan Wakely
-
d:p3123r0
P3123R0


2024-02 Library Evolution Polls
https://wg21.link/p3123r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3124r0
P3124R0


2024-02 Library Evolution Poll Outcomes
https://wg21.link/p3124r0




-
d:p3125r0
P3125R0


Pointer tagging
https://wg21.link/p3125r0




Hana Dusíková
-
d:p3125r1
P3125R1


constexpr pointer tagging
https://wg21.link/p3125r1




Hana Dusíková
-
d:p3125r2
P3125R2


constexpr pointer tagging
https://wg21.link/p3125r2




Hana Dusíková
-
d:p3125r3
P3125R3


constexpr pointer tagging
https://wg21.link/p3125r3




Hana Dusíková
-
d:p3125r4
P3125R4


constexpr pointer tagging
https://wg21.link/p3125r4




Hana Dusíková
-
d:p3126r0
P3126R0


Graph Library: Overview
https://wg21.link/p3126r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3126r1
P3126R1


Graph Library: Overview
https://wg21.link/p3126r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3126r2
P3126R2


Graph Library: Overview
https://wg21.link/p3126r2




Phil Ratzloff, Andrew Lumsdaine
-
d:p3126r3
P3126R3


Graph Library: Overview
https://wg21.link/p3126r3




Phil Ratzloff, Andrew Lumsdaine
-
d:p3127r0
P3127R0


Graph Library: Background and Terminology
https://wg21.link/p3127r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3127r1
P3127R1


Graph Library: Background and Terminology
https://wg21.link/p3127r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3128r0
P3128R0


Graph Library: Algorithms
https://wg21.link/p3128r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3128r1
P3128R1


Graph Library: Algorithms
https://wg21.link/p3128r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3128r2
P3128R2


Graph Library: Algorithms
https://wg21.link/p3128r2




Phil Ratzloff, Andrew Lumsdaine
-
d:p3128r3
P3128R3


Graph Library: Algorithms
https://wg21.link/p3128r3




Phil Ratzloff, Andrew Lumsdaine
-
d:p3129r0
P3129R0


Graph Library: Views
https://wg21.link/p3129r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3129r1
P3129R1


Graph Library: Views
https://wg21.link/p3129r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3130r0
P3130R0


Graph Library: Graph Container Interface
https://wg21.link/p3130r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3130r1
P3130R1


Graph Library: Graph Container Interface
https://wg21.link/p3130r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3130r2
P3130R2


Graph Library: Graph Container Interface
https://wg21.link/p3130r2




Phil Ratzloff, Andrew Lumsdaine
-
d:p3130r3
P3130R3


Graph Library: Graph Container Interface
https://wg21.link/p3130r3




Phil Ratzloff, Andrew Lumsdaine
-
d:p3131r0
P3131R0


Graph Library: Graph Containers
https://wg21.link/p3131r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3131r1
P3131R1


Graph Library: Containers
https://wg21.link/p3131r1




Phil Ratzloff, Andrew Lumsdaine
-
d:p3131r2
P3131R2


Graph Library: Graph Containers
https://wg21.link/p3131r2




Phil Ratzloff, Andrew Lumsdaine
-
d:p3131r3
P3131R3


Graph Library: Graph Containers
https://wg21.link/p3131r3




Phil Ratzloff, Andrew Lumsdaine
-
d:p3133r0
P3133R0


Fast first-factor finding function
https://wg21.link/p3133r0




Chip Hogg
-
d:p3135r0
P3135R0


Hazard Pointer Extensions
https://wg21.link/p3135r0




Maged Michael, Michael Wong, Paul McKenney
-
d:p3135r1
P3135R1


Hazard Pointer Extensions
https://wg21.link/p3135r1




Maged Michael, Michael Wong, Paul McKenney
-
d:p3136r0
P3136R0


Retiring niebloids
https://wg21.link/p3136r0




Tim Song
-
d:p3136r1
P3136R1


Retiring niebloids
https://wg21.link/p3136r1




Tim Song
-
d:p3137r0
P3137R0


views::to_input
https://wg21.link/p3137r0




Tim Song
-
d:p3137r1
P3137R1


views::to_input
https://wg21.link/p3137r1




Tim Song
-
d:p3137r2
P3137R2


views::to_input
https://wg21.link/p3137r2




Tim Song
-
d:p3137r3
P3137R3


views::to_input
https://wg21.link/p3137r3




Tim Song
-
d:p3138r0
P3138R0


views::cache_last
https://wg21.link/p3138r0




Tim Song
-
d:p3138r1
P3138R1


views::cache_last
https://wg21.link/p3138r1




Tim Song
-
d:p3138r2
P3138R2


views::cache_last
https://wg21.link/p3138r2




Tim Song
-
d:p3138r3
P3138R3


views::cache_latest
https://wg21.link/p3138r3




Tim Song
-
d:p3138r4
P3138R4


views::cache_latest
https://wg21.link/p3138r4




Tim Song
-
d:p3138r5
P3138R5


views::cache_latest
https://wg21.link/p3138r5




Tim Song
-
d:p3139r0
P3139R0


Pointer cast for unique_ptr
https://wg21.link/p3139r0




Zhihao Yuan, Jordan Saxonberg
-
d:p3139r1
P3139R1


Pointer cast for unique_ptr
https://wg21.link/p3139r1




Zhihao Yuan, Jordan Saxonberg
-
d:p3140r0
P3140R0


std::int_least128_t
https://wg21.link/p3140r0




Jan Schultke
-
d:p3141
P3141


std::terminates()
https://wg21.link/p3141




Hal T. Ng, Professor, C.S., LLVM.edu
-
d:p3142r0
P3142R0


Printing Blank Lines with println
https://wg21.link/p3142r0




Alan Talbot
-
d:p3143r0
P3143R0


An in-depth walk through of the example in P3090R0
https://wg21.link/p3143r0




Lewis Baker
-
d:p3144r0
P3144R0


Deprecate Delete of Incomplete Class Type
https://wg21.link/p3144r0




Alisdair Meredith, Mingo Gill, John Lakos
-
d:p3144r1
P3144R1


Deprecate Delete of Incomplete Class Type
https://wg21.link/p3144r1




Alisdair Meredith, Mingo Gill, John Lakos
-
d:p3144r2
P3144R2


Deleting a Pointer to an Incomplete Type Should be Ill-formed
https://wg21.link/p3144r2




Alisdair Meredith, Mingo Gill, John Lakos
-
d:p3146r0
P3146R0


Clarifying std::variant converting construction
https://wg21.link/p3146r0




Giuseppe D'Angelo
-
d:p3146r1
P3146R1


Clarifying std::variant converting construction
https://wg21.link/p3146r1




Giuseppe D'Angelo
-
d:p3146r2
P3146R2


Clarifying std::variant converting construction
https://wg21.link/p3146r2




Giuseppe D'Angelo
-
d:p3147r0
P3147R0


A Direction for Vector
https://wg21.link/p3147r0




Alan Talbot
-
d:p3147r1
P3147R1


A Direction for Vector
https://wg21.link/p3147r1




Alan Talbot
-
d:p3148r0
P3148R0


Formatting of chrono Time Values
https://wg21.link/p3148r0




Alan Talbot
-
d:p3148r1
P3148R1


Formatting of chrono Time Values
https://wg21.link/p3148r1




Alan Talbot
-
d:p3149r0
P3149R0


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r0




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r1
P3149R1


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r1




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r10
P3149R10


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r10




Ian Petersen, Jessica Wong; Dietmar Kühl; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu; Ruslan Arutyunyan;
-
d:p3149r11
P3149R11


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r11




Ian Petersen, Jessica Wong; Dietmar Kühl; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu; Ruslan Arutyunyan;
-
d:p3149r2
P3149R2


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r2




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r3
P3149R3


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r3




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r4
P3149R4


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r4




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r5
P3149R5


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r5




Ian Petersen, Ján Ondrušek; Jessica Wong; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r6
P3149R6


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r6




Ian Petersen, Jessica Wong; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu;
-
d:p3149r7
P3149R7


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r7




Ian Petersen, Jessica Wong; Dietmar Kühl; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu; Ruslan Arutyunyan;
-
d:p3149r8
P3149R8


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r8




Ian Petersen, Jessica Wong; Dietmar Kühl; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu; Ruslan Arutyunyan;
-
d:p3149r9
P3149R9


async_scope — Creating scopes for non-sequential concurrency
https://wg21.link/p3149r9




Ian Petersen, Jessica Wong; Dietmar Kühl; Ján Ondrušek; Kirk Shoop; Lee Howes; Lucian Radu Teodorescu; Ruslan Arutyunyan;
-
d:p3150r0
P3150R0


SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2023/12/13-2024/2/14
https://wg21.link/p3150r0




Michael Wong
-
d:p3151r0
P3151R0


SG19: Machine Learning virtual Meeting Minutes to 2023/12/14-2024/02/8
https://wg21.link/p3151r0




Michael Wong
-
d:p3152r0
P3152R0


Add missing constructors and assignment for indirect and polymorphic
https://wg21.link/p3152r0




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3152r1
P3152R1


Add missing constructors and assignment for indirect and polymorphic
https://wg21.link/p3152r1




Jonathan Coe, Antony Peacock, Sean Parent
-
d:p3153r0
P3153R0


An allocator-aware variant type
https://wg21.link/p3153r0




Nina Ranns, Pablo Halpern, Ville Voutilainen
-
d:p3154r0
P3154R0


Deprecating signed character types in iostreams
https://wg21.link/p3154r0




Elias Kosunen
-
d:p3154r1
P3154R1


Deprecating signed character types in iostreams
https://wg21.link/p3154r1




Elias Kosunen
-
d:p3155r0
P3155R0


noexcept policy for SD-9 (The Lakos Rule)
https://wg21.link/p3155r0




Timur Doumler, John Lakos
-
d:p3156r0
P3156R0


empty_checkable_range
https://wg21.link/p3156r0




Hewill Kang
-
d:p3157r0
P3157R0


Generative Extensions for Reflection
https://wg21.link/p3157r0




Andrei Alexandrescu, Bryce Lelbach, Michael Garland
-
d:p3157r1
P3157R1


Generative Extensions for Reflection
https://wg21.link/p3157r1




Andrei Alexandrescu, Barry Revzin, Bryce Lelbach, Michael Garland
-
d:p3158r0
P3158R0


Headless Template Template Parameters
https://wg21.link/p3158r0




James Touton
-
d:p3159r0
P3159R0


C++ Range Adaptors and Parallel Algorithms
https://wg21.link/p3159r0




Bryce Adelstein Lelbach
-
d:p3160r0
P3160R0


An allocator-aware `inplace_vector`
https://wg21.link/p3160r0




Pablo Halpern
-
d:p3160r1
P3160R1


An allocator-aware `inplace_vector`
https://wg21.link/p3160r1




Pablo Halpern
-
d:p3160r2
P3160R2


An allocator-aware `inplace_vector`
https://wg21.link/p3160r2




Pablo Halpern, Arthur O'Dwyer
-
d:p3161r0
P3161R0


Unified integer overflow arithmetic
https://wg21.link/p3161r0




Tiago Freire
-
d:p3161r1
P3161R1


Unified integer overflow arithmetic
https://wg21.link/p3161r1




Tiago Freire
-
d:p3161r2
P3161R2


Unified integer overflow arithmetic
https://wg21.link/p3161r2




Tiago Freire
-
d:p3161r3
P3161R3


Unified integer overflow arithmetic
https://wg21.link/p3161r3




Tiago Freire
-
d:p3161r4
P3161R4


Unified integer overflow arithmetic
https://wg21.link/p3161r4




Tiago Freire
-
d:p3162r0
P3162R0


LEWG [[nodiscard]] policy
https://wg21.link/p3162r0




Darius Neațu, David Sankel
-
d:p3164r0
P3164R0


Improving diagnostics for sender expressions
https://wg21.link/p3164r0




Eric Niebler
-
d:p3164r1
P3164R1


Improving diagnostics for sender expressions
https://wg21.link/p3164r1




Eric Niebler
-
d:p3164r2
P3164R2


Improving diagnostics for sender expressions
https://wg21.link/p3164r2




Eric Niebler
-
d:p3164r3
P3164R3


Early Diagnostics for Sender Expressions
https://wg21.link/p3164r3




Eric Niebler
-
d:p3164r4
P3164R4


Early Diagnostics for Sender Expressions
https://wg21.link/p3164r4




Eric Niebler
-
d:p3165r0
P3165R0


Contracts on virtual functions for the Contracts MVP
https://wg21.link/p3165r0




Ville Voutilainen
-
d:p3166r0
P3166R0


Static Exception Specifications
https://wg21.link/p3166r0




Lewis Baker
-
d:p3167r0
P3167R0


Attributes for the result name in a postcondition assertion
https://wg21.link/p3167r0




Tom Honermann
-
d:p3168r0
P3168R0


Give std::optional Range Support
https://wg21.link/p3168r0




David Sankel, Marco Foco, Darius Neațu, Barry Revzin
-
d:p3168r1
P3168R1


Give std::optional Range Support
https://wg21.link/p3168r1




David Sankel, Marco Foco, Darius Neațu, Barry Revzin
-
d:p3168r2
P3168R2


Give std::optional Range Support
https://wg21.link/p3168r2




David Sankel, Marco Foco, Darius Neațu, Barry Revzin
-
d:p3169r0
P3169R0


Inherited contracts
https://wg21.link/p3169r0




Jonas Persson
-
d:p3170r0
P3170R0


sinkable exception error message
https://wg21.link/p3170r0




Jarrad J Waterloo
-
d:p3171r0
P3171R0


Adding functionality to placeholder types
https://wg21.link/p3171r0




Barry Revzin, Peter Dimov
-
d:p3172r0
P3172R0


Using `this` in constructor preconditions
https://wg21.link/p3172r0




Andrzej Krzemieński
-
d:p3173r0
P3173R0


P2900R6 may be minimimal, but it is not viable
https://wg21.link/p3173r0




Gabriel Dos Reis
-
d:p3174r0
P3174R0


SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21
https://wg21.link/p3174r0




Tom Honermann
-
d:p3175r0
P3175R0


Reconsidering the `std::execution::on` algorithm
https://wg21.link/p3175r0




Eric Niebler
-
d:p3175r1
P3175R1


Reconsidering the `std::execution::on` algorithm
https://wg21.link/p3175r1




Eric Niebler
-
d:p3175r2
P3175R2


Reconsidering the `std::execution::on` algorithm
https://wg21.link/p3175r2




Eric Niebler
-
d:p3175r3
P3175R3


Reconsidering the `std::execution::on` algorithm
https://wg21.link/p3175r3




Eric Niebler
-
d:p3176r0
P3176R0


The Oxford variadic comma
https://wg21.link/p3176r0




Jan Schultke
-
d:p3176r1
P3176R1


The Oxford variadic comma
https://wg21.link/p3176r1




Jan Schultke
-
d:p3177r0
P3177R0


const prvalues in the conditional operator
https://wg21.link/p3177r0




Barry Revzin
-
d:p3178r0
P3178R0


Retrieval of Exception Information
https://wg21.link/p3178r0




TPK Healy
-
d:p3178r1
P3178R1


Retrieval of Exception Information
https://wg21.link/p3178r1




TPK Healy
-
d:p3179r0
P3179R0


C++ parallel range algorithms
https://wg21.link/p3179r0




Ruslan Arutyunyan, Alexey Kukanov
-
d:p3179r1
P3179R1


C++ parallel range algorithms
https://wg21.link/p3179r1




Ruslan Arutyunyan, Alexey Kukanov
-
d:p3179r2
P3179R2


C++ parallel range algorithms
https://wg21.link/p3179r2




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r3
P3179R3


C++ parallel range algorithms
https://wg21.link/p3179r3




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r4
P3179R4


C++ parallel range algorithms
https://wg21.link/p3179r4




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r5
P3179R5


C++ parallel range algorithms
https://wg21.link/p3179r5




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r6
P3179R6


C++ parallel range algorithms
https://wg21.link/p3179r6




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r7
P3179R7


C++ parallel range algorithms
https://wg21.link/p3179r7




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r8
P3179R8


C++ parallel range algorithms
https://wg21.link/p3179r8




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3179r9
P3179R9


C++ parallel range algorithms
https://wg21.link/p3179r9




Ruslan Arutyunyan, Alexey Kukanov, Bryce Adelstein Lelbach
-
d:p3180r0
P3180R0


C++ Standard Library Ready Issues to be moved in Tokyo, Mar. 2024
https://wg21.link/p3180r0




Jonathan Wakely
-
d:p3181r0
P3181R0


Atomic stores and object lifetimes
https://wg21.link/p3181r0




Hans Boehm, Dave Claussen, David Goldblatt
-
d:p3182r0
P3182R0


Add pop_value methods to container adaptors
https://wg21.link/p3182r0




Brian Bi
-
d:p3182r1
P3182R1


Add container pop methods that return the popped value
https://wg21.link/p3182r1




Brian Bi, Add container pop methods that return the popped value
-
d:p3183r0
P3183R0


Contract testing support
https://wg21.link/p3183r0




Bengt Gustafsson
-
d:p3183r1
P3183R1


Contract testing support
https://wg21.link/p3183r1




Bengt Gustafsson
-
d:p3185r0
P3185R0


A proposed direction for C++ Standard Networking based on IETF TAPS
https://wg21.link/p3185r0




Thomas Rodgers
-
d:p3187r1
P3187R1


remove ensure_started and start_detached from P2300
https://wg21.link/p3187r1




Kirk Shoop, Lewis Baker
-
d:p3188r0
P3188R0


Proxy: A Pointer-Semantics-Based Polymorphism Library - Presentation slides for P3086R1
https://wg21.link/p3188r0




Mingxin Wang
-
d:p3189r0
P3189R0


Slides for LEWG presentation of P2900R6: Contracts for C++
https://wg21.link/p3189r0




Timur Doumler, Joshua Berne, Andrzej Krzemieński
-
d:p3190r0
P3190R0


Slides for EWG presentation of D2900R7: Contracts for C++
https://wg21.link/p3190r0




Timur Doumler, Joshua Berne, Andrzej Krzemieński
-
d:p3191r0
P3191R0


Feedback on the scalability of contract violation handlers in P2900
https://wg21.link/p3191r0




Louis Dionne, Yeoul Na, Konstantin Varlamov
-
d:p3192r0
P3192R0


LEWGI/SG18 Presentation of P3104R1 Bit Permutations
https://wg21.link/p3192r0




Jan Schultke
-
d:p3194r0
P3194R0


LEWGI/SG18 Presentation of P3105R1 constexpr std::uncaught_exceptions()
https://wg21.link/p3194r0




Jan Schultke
-
d:p3196r0
P3196R0


Core Language Working Group "ready" Issues for the March, 2024 meeting
https://wg21.link/p3196r0




Jens Maurer
-
d:p3197r0
P3197R0


A response to the Tokyo EWG polls on the Contracts MVP (P2900R6)
https://wg21.link/p3197r0




Timur Doumler, John Spicer
-
d:p3198r0
P3198R0


A takeaway from the Tokyo LEWG meeting on Contracts MVP
https://wg21.link/p3198r0




Andrzej Krzemieński
-
d:p3199r0
P3199R0


Choices for make_optional and value()
https://wg21.link/p3199r0




Steve Downey
-
d:p3201r0
P3201R0


LEWG [[nodiscard]] policy
https://wg21.link/p3201r0




Jonathan Wakely, David Sankel, Darius Neațu
-
d:p3201r1
P3201R1


LEWG [[nodiscard]] policy
https://wg21.link/p3201r1




Jonathan Wakely, David Sankel, Darius Neațu
-
d:p3203r0
P3203R0


Implementation defined coroutine extensions
https://wg21.link/p3203r0




Klemens Morgenstern
-
d:p3204r0
P3204R0


Why Contracts?
https://wg21.link/p3204r0




Joshua Berne
-
d:p3205r0
P3205R0


Throwing from a `noexcept` function should be a contract violation.
https://wg21.link/p3205r0




Gašper Ažman, Jeff Snyder, Andrei Zissu, Ben Craig
-
d:p3206r0
P3206R0


A sender query for completion behaviour
https://wg21.link/p3206r0




Maikel Nadolski
-
d:p3207r0
P3207R0


More & like
https://wg21.link/p3207r0




Jarrad J Waterloo
-
d:p3208r0
P3208R0


import std; and stream macros
https://wg21.link/p3208r0




Sunghyun Min
-
d:p3210r0
P3210R0


A Postcondition *is* a Pattern Match
https://wg21.link/p3210r0




Andrew Tomazos
-
d:p3210r1
P3210R1


A Postcondition *is* a Pattern Match
https://wg21.link/p3210r1




Andrew Tomazos
-
d:p3210r2
P3210R2


A Postcondition *is* a Pattern Match
https://wg21.link/p3210r2




Andrew Tomazos
-
d:p3211r0
P3211R0


views::transform_join
https://wg21.link/p3211r0




Hewill Kang
-
d:p3211r1
P3211R1


views::flat_map
https://wg21.link/p3211r1




Hewill Kang
-
d:p3212r0
P3212R0


The contract of sort()
https://wg21.link/p3212r0




Andrzej Krzemieński
-
d:p3213r0
P3213R0


2024-04 Library Evolution Polls
https://wg21.link/p3213r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3214r0
P3214R0


2024-04 Library Evolution Poll Outcomes
https://wg21.link/p3214r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3215r0
P3215R0


Slides: Thread Attributes as Designators (P3072R2 presentation)
https://wg21.link/p3215r0




Zhihao Yuan
-
d:p3216r0
P3216R0


views::slice
https://wg21.link/p3216r0




Hewill Kang
-
d:p3216r1
P3216R1


views::slice
https://wg21.link/p3216r1




Hewill Kang
-
d:p3217r0
P3217R0


Adjoints to "Enabling list-initialization for algorithms": find_last
https://wg21.link/p3217r0




Giuseppe D'Angelo
-
d:p3218r0
P3218R0


const references to constexpr variables
https://wg21.link/p3218r0




Jarrad J Waterloo
-
d:p3220r0
P3220R0


views::delimit
https://wg21.link/p3220r0




Hewill Kang
-
d:p3220r1
P3220R1


views::take_before
https://wg21.link/p3220r1




Hewill Kang
-
d:p3221r0
P3221R0


Disable pointers to contracted functions
https://wg21.link/p3221r0




Jonas Persson
-
d:p3222r0
P3222R0


Fix C++26 by adding transposed special cases for P2642 layouts
https://wg21.link/p3222r0




Mark Hoemmen
-
d:p3222r1
P3222R1


Fix C++26 by adding transposed special cases for P2642 layouts
https://wg21.link/p3222r1




Mark Hoemmen
-
d:p3223r0
P3223R0


Making std::basic_istream::ignore less surprising
https://wg21.link/p3223r0




Jonathan Wakely
-
d:p3223r1
P3223R1


Making std::istream::ignore less surprising
https://wg21.link/p3223r1




Jonathan Wakely
-
d:p3223r2
P3223R2


Making std::istream::ignore less surprising
https://wg21.link/p3223r2




Jonathan Wakely
-
d:p3224r0
P3224R0


Slides for P3087 - Make direct-initialization for enumeration types at least as permissive as direct
https://wg21.link/p3224r0




Jan Schultke
-
d:p3225r0
P3225R0


Slides for P3140 std::int_least128_t
https://wg21.link/p3225r0




Jan Schultke
-
d:p3226r0
P3226R0


Contracts for C++: Naming the "Louis semantic"
https://wg21.link/p3226r0




Timur Doumler
-
d:p3227r0
P3227R0


Contracts for C++: Fixing the contract violation handling API
https://wg21.link/p3227r0




Gašper Ažman, Timur Doumler
-
d:p3227r1
P3227R1


Fixing the library API for contract violation handling
https://wg21.link/p3227r1




Gašper Ažman, Timur Doumler
-
d:p3228r0
P3228R0


Contracts for C++: Revisiting contract check elision and duplication
https://wg21.link/p3228r0




Timur Doumler
-
d:p3228r1
P3228R1


Contracts for C++: Revisiting contract check elision and duplication
https://wg21.link/p3228r1




Timur Doumler
-
d:p3229r0
P3229R0


Making erroneous behaviour compatible with Contracts
https://wg21.link/p3229r0




Timur Doumler, Joshua Berne, Gašper Ažman
-
d:p3229r1
P3229R1


Making erroneous behaviour compatible with Contracts
https://wg21.link/p3229r1




Timur Doumler, Joshua Berne, Gašper Ažman
-
d:p3230r0
P3230R0


views::(take|drop)_exactly
https://wg21.link/p3230r0




Hewill Kang
-
d:p3230r1
P3230R1


views::unchecked_(take|drop)
https://wg21.link/p3230r1




Hewill Kang
-
d:p3230r2
P3230R2


views::unchecked_(take|drop)
https://wg21.link/p3230r2




Hewill Kang
-
d:p3232r0
P3232R0


User-defined erroneous behaviour
https://wg21.link/p3232r0




Thomas Köppe
-
d:p3232r1
P3232R1


User-defined erroneous behaviour
https://wg21.link/p3232r1




Thomas Köppe
-
d:p3233r0
P3233R0


Issues with P2786 (Trivial Relocatability For C++26)
https://wg21.link/p3233r0




Giuseppe D'Angelo
-
d:p3234r0
P3234R0


Utility to check if a pointer is in a given range
https://wg21.link/p3234r0




Glen Joseph Fernandes
-
d:p3234r1
P3234R1


Utility to check if a pointer is in a given range
https://wg21.link/p3234r1




Glen Joseph Fernandes
-
d:p3235r0
P3235R0


std::print more types faster with less memory
https://wg21.link/p3235r0




Victor Zverovich
-
d:p3235r1
P3235R1


std::print more types faster with less memory
https://wg21.link/p3235r1




Victor Zverovich
-
d:p3235r2
P3235R2


std::print more types faster with less memory
https://wg21.link/p3235r2




Victor Zverovich
-
d:p3235r3
P3235R3


std::print more types faster with less memory
https://wg21.link/p3235r3




Victor Zverovich
-
d:p3236r0
P3236R0


Please reject P2786 and adopt P1144
https://wg21.link/p3236r0




Alan de Freitas, Daniel Liam Anderson, Giuseppe D'Angelo, Hans Goudey, Hartmut Kaiser, Isidoros Tsaousis, Jacques Lucke, Krystian Stasiowski, Shreyas Atre, Stéphane Janel, Thiago Maciera
-
d:p3236r1
P3236R1


Please reject P2786 and adopt P1144
https://wg21.link/p3236r1




Alan de Freitas, Daniel Liam Anderson, Giuseppe D'Angelo, Hans Goudey, Jacques Lucke, Krystian Stasiowski, Stéphane Janel, Thiago Maciera
-
d:p3237r0
P3237R0


Matrix Representation of Contract Semantics
https://wg21.link/p3237r0




Andrei Zissu
-
d:p3237r1
P3237R1


Matrix Representation of Contract Semantics
https://wg21.link/p3237r1




Andrei Zissu
-
d:p3237r2
P3237R2


Matrix Representation of Contract Semantics
https://wg21.link/p3237r2




Andrei Zissu
-
d:p3238r0
P3238R0


An alternate proposal for naming contract semantics
https://wg21.link/p3238r0




Ville Voutilainen
-
d:p3239r0
P3239R0


A Relocating Swap
https://wg21.link/p3239r0




Alisdair Meredith
-
d:p3240r0
P3240R0


Slides for EWGI presentation on allocators, Tokyo 2024
https://wg21.link/p3240r0




Alisdair Meredith
-
d:p3241r0
P3241R0


Slides for LEWG presentation on trivial relocation, April 2024
https://wg21.link/p3241r0




Alisdair Meredith
-
d:p3242r0
P3242R0


Copy and fill for mdspan
https://wg21.link/p3242r0




Nicolas Morales, Christian Trott, Mark Hoemmen, Damien Lebrun-Grandie
-
d:p3242r1
P3242R1


Copy and fill for mdspan
https://wg21.link/p3242r1




Nicolas Morales, Christian Trott, Mark Hoemmen, Damien Lebrun-Grandie
-
d:p3243r0
P3243R0


Give std::optional Range Support - Presentation, Tokyo 2024
https://wg21.link/p3243r0




David Sankel, Marco Foco, Darius Neațu, Barry Revzin
-
d:p3244r0
P3244R0


[[nodiscard]] Policy - Presentation, Tokyo 2024
https://wg21.link/p3244r0




David Sankel, Darius Neațu
-
d:p3245r0
P3245R0


Allow `[[nodiscard]]` in type alias declarations
https://wg21.link/p3245r0




Xavier Bonaventura
-
d:p3245r1
P3245R1


Allow `[[nodiscard]]` in type alias declarations
https://wg21.link/p3245r1




Xavier Bonaventura
-
d:p3245r2
P3245R2


Allow `[[nodiscard]]` in type alias declarations
https://wg21.link/p3245r2




Xavier Bonaventura
-
d:p3247r0
P3247R0


Deprecate the notion of trivial types
https://wg21.link/p3247r0




Jens Maurer
-
d:p3247r1
P3247R1


Deprecate the notion of trivial types
https://wg21.link/p3247r1




Jens Maurer
-
d:p3247r2
P3247R2


Deprecate the notion of trivial types
https://wg21.link/p3247r2




Jens Maurer
-
d:p3248r0
P3248R0


Require [u]intptr_t
https://wg21.link/p3248r0




Gonzalo Brito Gadeschi
-
d:p3248r1
P3248R1


Require [u]intptr_t
https://wg21.link/p3248r1




Gonzalo Brito Gadeschi
-
d:p3248r2
P3248R2


Require [u]intptr_t
https://wg21.link/p3248r2




Gonzalo Brito Gadeschi
-
d:p3248r3
P3248R3


Require [u]intptr_t
https://wg21.link/p3248r3




Gonzalo Brito Gadeschi
-
d:p3248r4
P3248R4


Require [u]intptr_t
https://wg21.link/p3248r4




Gonzalo Brito Gadeschi
-
d:p3249r0
P3249R0


A unified syntax for Pattern Matching and Contracts when introducing a new name
https://wg21.link/p3249r0




Ran Regev
-
d:p3250r0
P3250R0


C++ contracts with regards to function pointers
https://wg21.link/p3250r0




Peter Bindels
-
d:p3251r0
P3251R0


C++ contracts and coroutines
https://wg21.link/p3251r0




Peter Bindels
-
d:p3253r0
P3253R0


Distinguishing between member and free coroutines
https://wg21.link/p3253r0




Brian Bi
-
d:p3254r0
P3254R0


Reserve identifiers preceded by @ for non-ignorable annotation tokens
https://wg21.link/p3254r0




Brian Bi
-
d:p3255r0
P3255R0


Expose whether atomic notifying operations are lock-free
https://wg21.link/p3255r0




Brian Bi
-
d:p3255r1
P3255R1


Expose whether atomic notifying operations are lock-free
https://wg21.link/p3255r1




Brian Bi
-
d:p3257r0
P3257R0


Make the predicate of contract_assert more regular
https://wg21.link/p3257r0




Jens Maurer
-
d:p3258r0
P3258R0


Formatting charN_t
https://wg21.link/p3258r0




Corentin Jabot
-
d:p3259r0
P3259R0


const by default
https://wg21.link/p3259r0




Jarrad J Waterloo
-
d:p3261r0
P3261R0


Revisiting `const`-ification in Contract Assertions
https://wg21.link/p3261r0




Joshua Berne
-
d:p3261r1
P3261R1


Revisiting `const`-ification in Contract Assertions
https://wg21.link/p3261r1




Joshua Berne
-
d:p3261r2
P3261R2


Revisiting `const`-ification in Contract Assertions
https://wg21.link/p3261r2




Joshua Berne
-
d:p3263r0
P3263R0


Encoded annotated char
https://wg21.link/p3263r0




Tiago Freire
-
d:p3264r0
P3264R0


Double-evaluation of preconditions
https://wg21.link/p3264r0




Ville Voutilainen
-
d:p3264r1
P3264R1


Double-evaluation of preconditions
https://wg21.link/p3264r1




Ville Voutilainen
-
d:p3265r0
P3265R0


Ship Contracts in a TS
https://wg21.link/p3265r0




Ville Voutilainen
-
d:p3265r1
P3265R1


Ship Contracts in a TS
https://wg21.link/p3265r1




Ville Voutilainen
-
d:p3265r2
P3265R2


Ship Contracts in a TS
https://wg21.link/p3265r2




Ville Voutilainen
-
d:p3265r3
P3265R3


Ship Contracts in a TS
https://wg21.link/p3265r3




Ville Voutilainen
-
d:p3266r0
P3266R0


non referenceable types
https://wg21.link/p3266r0




Jarrad J Waterloo
-
d:p3267r0
P3267R0


C++ contracts implementation strategies
https://wg21.link/p3267r0




Peter Bindels
-
d:p3267r1
P3267R1


Approaches to C++ Contracts
https://wg21.link/p3267r1




Peter Bindels, Tom Honermann
-
d:p3268r0
P3268R0


C++ Contracts Constification Challenges Concerning Current Code
https://wg21.link/p3268r0




Peter Bindels
-
d:p3269r0
P3269R0


Do Not Ship Contracts as a TS
https://wg21.link/p3269r0




Timur Doumler, John Spicer
-
d:p3270r0
P3270R0


Repetition, Elision, and Constification w.r.t. contract_assert
https://wg21.link/p3270r0




John Lakos, Joshua Berne
-
d:p3271r0
P3271R0


Function Usage Types (Contracts for Function Pointers)
https://wg21.link/p3271r0




Lisa Lippincott
-
d:p3271r1
P3271R1


Function Types with Usage (Contracts for Function Pointers)
https://wg21.link/p3271r1




Lisa Lippincott
-
d:p3273r0
P3273R0


Introspection of Closure Types
https://wg21.link/p3273r0




Andrei Alexandrescu, Daveed Vandevoorde, David Olsen, Michael Garland
-
d:p3274r0
P3274R0


A framework for Profiles development
https://wg21.link/p3274r0




Bjarne Stroustrup
-
d:p3275r0
P3275R0


Replace simd operator[] with getter and setter functions - or not
https://wg21.link/p3275r0




Matthias Kretz
-
d:p3276r0
P3276R0


P2900 Is Superior to a Contracts TS
https://wg21.link/p3276r0




Joshua Berne, Steve Downey, Jake Fevold, Mungo Gill, Rostislav Khlebnikov, John Lakos, and Alisdair Meredith
-
d:p3278r0
P3278R0


Analysis of interaction between relocation, assignment, and swap
https://wg21.link/p3278r0




Nina Ranns
-
d:p3279r0
P3279R0


CWG2463: What 'trivially fooable' should mean
https://wg21.link/p3279r0




Arthur O'Dwyer
-
d:p3281r0
P3281R0


Contact checks should be regular C++
https://wg21.link/p3281r0




John Spicer
-
d:p3282r0
P3282R0


Static Storage for C++ Concurrent bounded_queue
https://wg21.link/p3282r0




Detlef Vollmann
-
d:p3283r0
P3283R0


Adding .first() and .last() to strings
https://wg21.link/p3283r0




Rhidian De Wit
-
d:p3284r0
P3284R0


`finally`, `write_env`, and `unstoppable` Sender Adaptors
https://wg21.link/p3284r0




Eric Niebler
-
d:p3284r1
P3284R1


`finally`, `write_env`, and `unstoppable` Sender Adaptors
https://wg21.link/p3284r1




Eric Niebler
-
d:p3284r2
P3284R2


`write_env` and `unstoppable` Sender Adaptors
https://wg21.link/p3284r2




Eric Niebler
-
d:p3284r3
P3284R3


`write_env` and `unstoppable` Sender Adaptors
https://wg21.link/p3284r3




Eric Niebler
-
d:p3284r4
P3284R4


`write_env` and `unstoppable` Sender Adaptors
https://wg21.link/p3284r4




Eric Niebler
-
d:p3285r0
P3285R0


Contracts: Protecting The Protector
https://wg21.link/p3285r0




Gabriel Dos Reis
-
d:p3286r0
P3286R0


Module Metadata Format for Distribution with Pre-Built Libraries
https://wg21.link/p3286r0




Daniel Ruoso
-
d:p3287r0
P3287R0


Exploration of namespaces for std::simd
https://wg21.link/p3287r0




Matthias Kretz
-
d:p3287r1
P3287R1


Exploration of namespaces for std::simd
https://wg21.link/p3287r1




Matthias Kretz
-
d:p3287r2
P3287R2


Exploration of namespaces for std::simd
https://wg21.link/p3287r2




Matthias Kretz
-
d:p3287r3
P3287R3


Exploration of namespaces for std::simd
https://wg21.link/p3287r3




Matthias Kretz
-
d:p3288r0
P3288R0


std::elide
https://wg21.link/p3288r0




Thomas P. K. Healy
-
d:p3288r1
P3288R1


std::elide
https://wg21.link/p3288r1




Thomas P. K. Healy
-
d:p3288r2
P3288R2


std::elide
https://wg21.link/p3288r2




Thomas P. K. Healy
-
d:p3288r3
P3288R3


std::elide
https://wg21.link/p3288r3




Thomas P. K. Healy
-
d:p3289r0
P3289R0


Consteval blocks
https://wg21.link/p3289r0




Daveed Vandevoorde, Wyatt Childers, Barry Revzin
-
d:p3289r1
P3289R1


Consteval blocks
https://wg21.link/p3289r1




Daveed Vandevoorde, Wyatt Childers, Dan Katz, Barry Revzin
-
d:p3290r0
P3290R0


Integrating Existing Assertions With Contracts
https://wg21.link/p3290r0




Joshua Berne, Timur Doumler, John Lakos
-
d:p3290r1
P3290R1


Integrating Existing Assertions With Contracts
https://wg21.link/p3290r1




Joshua Berne, Timur Doumler, John Lakos
-
d:p3290r2
P3290R2


Integrating Existing Assertions With Contracts
https://wg21.link/p3290r2




Joshua Berne, Timur Doumler, John Lakos
-
d:p3290r3
P3290R3


Integrating Existing Assertions With Contracts
https://wg21.link/p3290r3




Joshua Berne, Timur Doumler, John Lakos
-
d:p3292r0
P3292R0


Provenance and Concurrency
https://wg21.link/p3292r0




David Goldblatt
-
d:p3293r0
P3293R0


Splicing a base class subobject
https://wg21.link/p3293r0




Barry Revzin, Peter Dimov, Dan Katz, Daveed Vandevoorde
-
d:p3293r1
P3293R1


Splicing a base class subobject
https://wg21.link/p3293r1




Barry Revzin, Peter Dimov, Dan Katz, Daveed Vandevoorde
-
d:p3293r2
P3293R2


Splicing a base class subobject
https://wg21.link/p3293r2




Barry Revzin, Peter Dimov, Dan Katz, Daveed Vandevoorde
-
d:p3293r3
P3293R3


Splicing a base class subobject
https://wg21.link/p3293r3




Barry Revzin, Peter Dimov, Dan Katz, Daveed Vandevoorde
-
d:p3294r0
P3294R0


Code Injection with Token Sequences
https://wg21.link/p3294r0




Barry Revzin, Andrei Alexandrescu, Daveed Vandevoorde
-
d:p3294r1
P3294R1


Code Injection with Token Sequences
https://wg21.link/p3294r1




Barry Revzin, Andrei Alexandrescu, Daveed Vandevoorde
-
d:p3294r2
P3294R2


Code Injection with Token Sequences
https://wg21.link/p3294r2




Barry Revzin, Andrei Alexandrescu, Daveed Vandevoorde
-
d:p3295r0
P3295R0


Freestanding constexpr containers and constexpr exception types
https://wg21.link/p3295r0




Ben Craig
-
d:p3295r1
P3295R1


Freestanding constexpr containers and constexpr exception types
https://wg21.link/p3295r1




Ben Craig
-
d:p3295r2
P3295R2


Freestanding constexpr containers and constexpr exception types
https://wg21.link/p3295r2




Ben Craig
-
d:p3295r3
P3295R3


Freestanding constexpr containers and constexpr exception types
https://wg21.link/p3295r3




Ben Craig
-
d:p3296r0
P3296R0


let_with_async_scope
https://wg21.link/p3296r0




Anthony Williams
-
d:p3296r1
P3296R1


let_with_async_scope
https://wg21.link/p3296r1




Anthony Williams
-
d:p3296r2
P3296R2


let_async_scope
https://wg21.link/p3296r2




Anthony Williams
-
d:p3296r3
P3296R3


let_async_scope
https://wg21.link/p3296r3




Anthony Williams
-
d:p3296r4
P3296R4


let_async_scope
https://wg21.link/p3296r4




Anthony Williams
-
d:p3297r0
P3297R0


C++26 Needs Contract Checking
https://wg21.link/p3297r0




Ryan McDougall, Jean-Francois Campeau, Christian Eltzschig, Mathias Kraus, Pez Zarifian
-
d:p3297r1
P3297R1


C++26 Needs Contract Checking
https://wg21.link/p3297r1




Ryan McDougall, Jean-Francois Campeau, Christian Eltzschig, Mathias Kraus, Pez Zarifian
-
d:p3298r0
P3298R0


Implicit user-defined conversion functions as operator.()
https://wg21.link/p3298r0




Bengt Gustafsson
-
d:p3298r1
P3298R1


Implicit user-defined conversion functions as operator.()
https://wg21.link/p3298r1




Bengt Gustafsson
-
d:p3299r0
P3299R0


Range constructors for std::simd
https://wg21.link/p3299r0




Daniel Towner, Matthias Kretz
-
d:p3299r1
P3299R1


Range constructors for std::simd
https://wg21.link/p3299r1




Daniel Towner, Matthias Kretz, Ruslan Arutyunyan
-
d:p3299r2
P3299R2


Range constructors for std::simd
https://wg21.link/p3299r2




Daniel Towner, Matthias Kretz, Ruslan Arutyunyan
-
d:p3299r3
P3299R3


Range constructors for std::simd
https://wg21.link/p3299r3




Daniel Towner, Matthias Kretz, Ruslan Arutyunyan
-
d:p3300r0
P3300R0


C++ Asynchronous Parallel Algorithms
https://wg21.link/p3300r0




Bryce Adelstein Lelbach
-
d:p3301r0
P3301R0


inplace_stoppable_base
https://wg21.link/p3301r0




Lauri Vasama
-
d:p3302r0
P3302R0


SG16: Unicode meeting summaries 2024-03-13 through 2024-05-08
https://wg21.link/p3302r0




Tom Honermann
-
d:p3303r0
P3303R0


Fixing Lazy Sender Algorithm Customization
https://wg21.link/p3303r0




Eric Niebler
-
d:p3303r1
P3303R1


Fixing Lazy Sender Algorithm Customization
https://wg21.link/p3303r1




Eric Niebler
-
d:p3304r0
P3304R0


SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2024/04/10
https://wg21.link/p3304r0




Michael Wong
-
d:p3305r0
P3305R0


SG19: Machine Learning virtual Meeting Minutes to 2024/04/11-2024/05/09
https://wg21.link/p3305r0




Michael Wong
-
d:p3306r0
P3306R0


Atomic Read-Modify-Write Improvements
https://wg21.link/p3306r0




Gonzalo Brito Gadeschi, Damien Lebrun-Grandie
-
d:p3307r0
P3307R0


Floating-Point Maximum/Minimum Function Objects
https://wg21.link/p3307r0




Gonzalo Brito Gadeschi
-
d:p3308r0
P3308R0


mdarray design questions and answers
https://wg21.link/p3308r0




Mark Hoemmen, Christian Trott
-
d:p3309r0
P3309R0


constexpr atomic and atomic_ref
https://wg21.link/p3309r0




Hana Dusíková
-
d:p3309r1
P3309R1


constexpr atomic and atomic_ref
https://wg21.link/p3309r1




Hana Dusíková
-
d:p3309r2
P3309R2


constexpr atomic and atomic_ref
https://wg21.link/p3309r2




Hana Dusíková
-
d:p3309r3
P3309R3


constexpr atomic and atomic_ref
https://wg21.link/p3309r3




Hana Dusíková
-
d:p3310r0
P3310R0


Solving partial ordering issues introduced by P0522R0
https://wg21.link/p3310r0




Matheus Izvekov
-
d:p3310r1
P3310R1


Solving partial ordering issues introduced by P0522R0
https://wg21.link/p3310r1




Matheus Izvekov
-
d:p3310r2
P3310R2


Solving partial ordering issues introduced by P0522R0
https://wg21.link/p3310r2




Matheus Izvekov
-
d:p3310r3
P3310R3


Solving partial ordering issues introduced by P0522R0
https://wg21.link/p3310r3




Matheus Izvekov
-
d:p3310r4
P3310R4


Solving issues introduced by P0522R0
https://wg21.link/p3310r4




Matheus Izvekov
-
d:p3310r5
P3310R5


Solving issues introduced by relaxed template template parameter matching
https://wg21.link/p3310r5




Matheus Izvekov
-
d:p3310r6
P3310R6


Solving issues introduced by relaxed template template parameter matching
https://wg21.link/p3310r6




Matheus Izvekov, James Touton
-
d:p3311r0
P3311R0


An opt-in approach for integration of traditional assert facilities in C++ contracts
https://wg21.link/p3311r0




Tom Honermann
-
d:p3312r0
P3312R0


Overload Set Types
https://wg21.link/p3312r0




Bengt Gustafsson
-
d:p3312r1
P3312R1


Overload Set Types
https://wg21.link/p3312r1




Bengt Gustafsson
-
d:p3313r0
P3313R0


Impacts of noexept on ARM table based exception metadata
https://wg21.link/p3313r0




Khalil Estell
-
d:p3314r0
P3314R0


2024-07 Library Evolution Polls
https://wg21.link/p3314r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3315r0
P3315R0


2024-07 Library Evolution Poll Outcomes
https://wg21.link/p3315r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3316r0
P3316R0


A more predictable unchecked semantic
https://wg21.link/p3316r0




Jonas Persson
-
d:p3317r0
P3317R0


Compile time resolved contracts
https://wg21.link/p3317r0




Jonas Persson
-
d:p3318r0
P3318R0


Throwing violation handlers, from an application programming perspective
https://wg21.link/p3318r0




Ville Voutilainen
-
d:p3319r0
P3319R0


Add an iota object for simd (and more)
https://wg21.link/p3319r0




Matthias Kretz
-
d:p3319r1
P3319R1


Add an iota object for simd (and more)
https://wg21.link/p3319r1




Matthias Kretz
-
d:p3319r2
P3319R2


Add an iota object for simd (and more)
https://wg21.link/p3319r2




Matthias Kretz
-
d:p3319r3
P3319R3


Add an iota object for simd (and more)
https://wg21.link/p3319r3




Matthias Kretz
-
d:p3319r4
P3319R4


Add an iota object for simd (and more)
https://wg21.link/p3319r4




Matthias Kretz
-
d:p3319r5
P3319R5


Add an iota object for simd (and more)
https://wg21.link/p3319r5




Matthias Kretz
-
d:p3320r0
P3320R0


EWG slides for P3144 "Delete if Incomplete"
https://wg21.link/p3320r0




Alisdair Meredith
-
d:p3321r0
P3321R0


Contracts Interaction With Tooling
https://wg21.link/p3321r0




Joshua Berne
-
d:p3323r0
P3323R0


cv-qualified types in atomic and atomic_ref
https://wg21.link/p3323r0




Gonzalo Brito Gadeschi
-
d:p3323r1
P3323R1


cv-qualified types in atomic and atomic_ref
https://wg21.link/p3323r1




Gonzalo Brito Gadeschi
-
d:p3324r0
P3324R0


Attributes for namespace aliases, template parameters, and lambda captures
https://wg21.link/p3324r0




Tom Honermann
-
d:p3325r0
P3325R0


A Utility for Creating Execution Environments
https://wg21.link/p3325r0




Eric Niebler
-
d:p3325r1
P3325R1


A Utility for Creating Execution Environments
https://wg21.link/p3325r1




Eric Niebler
-
d:p3325r2
P3325R2


A Utility for Creating Execution Environments
https://wg21.link/p3325r2




Eric Niebler
-
d:p3325r3
P3325R3


A Utility for Creating Execution Environments
https://wg21.link/p3325r3




Eric Niebler
-
d:p3325r4
P3325R4


A Utility for Creating Execution Environments
https://wg21.link/p3325r4




Eric Niebler
-
d:p3325r5
P3325R5


A Utility for Creating Execution Environments
https://wg21.link/p3325r5




Eric Niebler
-
d:p3326r0
P3326R0


favor ease of use
https://wg21.link/p3326r0




Jarrad J. Waterloo
-
d:p3327r0
P3327R0


Contract assertions on function pointers
https://wg21.link/p3327r0




Timur Doumler
-
d:p3328r0
P3328R0


Observable Checkpoints During Contract Evaluation
https://wg21.link/p3328r0




Joshua Berne
-
d:p3329r0
P3329R0


Healing the C++ Filter View
https://wg21.link/p3329r0




Nicolai Josuttis
-
d:p3330r0
P3330R0


User-defined Atomic Read-Modify-Write Operations
https://wg21.link/p3330r0




Gonzalo Brito, Damien Lebrun-Grandie
-
d:p3331r0
P3331R0


Accessing The First and Last Elements in Associative Containers
https://wg21.link/p3331r0




Nikita Sakharin
-
d:p3331r1
P3331R1


Accessing The First and Last Elements in Associative Containers
https://wg21.link/p3331r1




Nikita Sakharin
-
d:p3332r0
P3332R0


A simpler notation for PM
https://wg21.link/p3332r0




Bjarne Stroustrup
-
d:p3334r0
P3334R0


Cross Static Variables
https://wg21.link/p3334r0




Coral Kashri, Andrei Zissu, Tal Yaakovi, Inbal Levi
-
d:p3335r0
P3335R0


Structured Core Options
https://wg21.link/p3335r0




René Ferdinand Rivera Morell
-
d:p3335r1
P3335R1


Structured Core Options
https://wg21.link/p3335r1




René Ferdinand Rivera Morell
-
d:p3335r2
P3335R2


Structured Core Options
https://wg21.link/p3335r2




René Ferdinand Rivera Morell
-
d:p3335r3
P3335R3


Structured Core Options
https://wg21.link/p3335r3




René Ferdinand Rivera Morell
-
d:p3335r4
P3335R4


WITHDRAWN: Structured Core Options
https://wg21.link/p3335r4




René Ferdinand Rivera Morell
-
d:p3336r0
P3336R0


Usage Experience for Contracts with BDE
https://wg21.link/p3336r0




Joshua Berne
-
d:p3337r0
P3337R0


Graph Library: Library Comparisons
https://wg21.link/p3337r0




Phil Ratzloff, Andrew Lumsdaine
-
d:p3338r0
P3338R0


Observe and ignore semantics in constant evaluation
https://wg21.link/p3338r0




Ville Voutilainen
-
d:p3339r0
P3339R0


C++ Ecosystem IS Open License
https://wg21.link/p3339r0




René Ferdinand Rivera Morell, Jayesh Badwaik
-
d:p3339r1
P3339R1


WITHDRAWN: C++ Ecosystem IS Open License
https://wg21.link/p3339r1




René Ferdinand Rivera Morell
-
d:p3340r0
P3340R0


A Consistent Grammar for Sequences
https://wg21.link/p3340r0




Alisdair Meredith
-
d:p3341r0
P3341R0


C++ Standard Library Ready Issues to be moved in St Louis, Jun. 2024
https://wg21.link/p3341r0




Jonathan Wakely
-
d:p3342r0
P3342R0


Working Draft, Standard for C++ Ecosystem
https://wg21.link/p3342r0




René Ferdinand Rivera Morell
-
d:p3342r1
P3342R1


Working Draft, Standard for C++ Ecosystem
https://wg21.link/p3342r1




René Ferdinand Rivera Morell
-
d:p3342r2
P3342R2


WITHDRAWN: Working Draft, Standard for C++ Ecosystem
https://wg21.link/p3342r2




René Ferdinand Rivera Morell
-
d:p3343r0
P3343R0


Contracts - What are we doing here (EWG Presentation)
https://wg21.link/p3343r0




Joshua Berne
-
d:p3344r0
P3344R0


Virtual Functions on Contracts (EWG - Presentation for P3097)
https://wg21.link/p3344r0




Joshua Berne, Timur Doumler, Lisa Lippincott
-
d:p3345r0
P3345R0


Core Language Working Group "ready" Issues for the June, 2024 meeting
https://wg21.link/p3345r0




Jens Maurer
-
d:p3346r0
P3346R0


thread_local means fiber-specific
https://wg21.link/p3346r0




Nat Goodspeed
-
d:p3347r0
P3347R0


Invalid/Prospective Pointer Operations
https://wg21.link/p3347r0




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, and JF Bastien
-
d:p3347r1
P3347R1


Invalid/Prospective Pointer Operations
https://wg21.link/p3347r1




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, and JF Bastien
-
d:p3347r2
P3347R2


Invalid/Prospective Pointer Operations
https://wg21.link/p3347r2




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, and JF Bastien
-
d:p3347r3
P3347R3


Invalid/Prospective Pointer Operations
https://wg21.link/p3347r3




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, and JF Bastien
-
d:p3347r4
P3347R4


Invalid/Prospective Pointer Operations
https://wg21.link/p3347r4




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Martin Uecker, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, JF Bastien, Jason McGuiness, and David Tenty
-
d:p3348r0
P3348R0


C++26 should refer to C23 not C17
https://wg21.link/p3348r0




Jonathan Wakely
-
d:p3348r1
P3348R1


C++26 should refer to C23 not C17
https://wg21.link/p3348r1




Jonathan Wakely
-
d:p3348r2
P3348R2


C++26 should refer to C23 not C17
https://wg21.link/p3348r2




Jonathan Wakely
-
d:p3348r3
P3348R3


C++26 should refer to C23 not C17
https://wg21.link/p3348r3




Jonathan Wakely
-
d:p3348r4
P3348R4


C++26 should refer to C23 not C17
https://wg21.link/p3348r4




Jonathan Wakely
-
d:p3349r0
P3349R0


Converting contiguous iterators to pointers
https://wg21.link/p3349r0




Jonathan Wakely
-
d:p3349r1
P3349R1


Converting contiguous iterators to pointers
https://wg21.link/p3349r1




Jonathan Wakely
-
d:p3351r0
P3351R0


views::scan
https://wg21.link/p3351r0




Yihe Li
-
d:p3351r1
P3351R1


views::scan
https://wg21.link/p3351r1




Yihe Li
-
d:p3351r2
P3351R2


views::scan
https://wg21.link/p3351r2




Yihe Li
-
d:p3352r0
P3352R0


Taming the Demons (C++ version) - Undefined Behavior and Partial Program Correctness
https://wg21.link/p3352r0




Andrew Tomazos, Martin Uecker
-
d:p3354r0
P3354R0


Slides for P3233R0
https://wg21.link/p3354r0




Giuseppe D'Angelo
-
d:p3355r0
P3355R0


Fix submdspan for C++26
https://wg21.link/p3355r0




Mark Hoemmen
-
d:p3355r1
P3355R1


Fix submdspan for C++26
https://wg21.link/p3355r1




Mark Hoemmen
-
d:p3355r2
P3355R2


Fix submdspan for C++26
https://wg21.link/p3355r2




Mark Hoemmen
-
d:p3356r0
P3356R0


non_invalidating_vector
https://wg21.link/p3356r0




Jarrad J Waterloo
-
d:p3357r0
P3357R0


NRVO with factory and after_factory
https://wg21.link/p3357r0




TPK Healy
-
d:p3358r0
P3358R0


SARIF for Structured Diagnostics
https://wg21.link/p3358r0




Sy Brand
-
d:p3359r0
P3359R0


Slides for P3298R0 - Implicit conversion functions
https://wg21.link/p3359r0




Bengt Gustafsson
-
d:p3360r0
P3360R0


Slides for P3312R0 - Overload Set Types
https://wg21.link/p3360r0




Bengt Gustafsson
-
d:p3361r0
P3361R0


Class invariants and contract checking philosophy
https://wg21.link/p3361r0




Esa Pulkkinen
-
d:p3361r1
P3361R1


Class invariants and contract checking philosophy
https://wg21.link/p3361r1




Esa Pulkkinen
-
d:p3362r0
P3362R0


Static analysis and 'safety' of Contracts, P2900 vs. P2680/P3285
https://wg21.link/p3362r0




Ville Voutilainen
-
d:p3364r0
P3364R0


Remove Deprecated u8path overloads From C++26
https://wg21.link/p3364r0




Alisdair Meredith
-
d:p3365r0
P3365R0


Remove the Deprecated iterator Class Template from C++26
https://wg21.link/p3365r0




Alisdair Meredith
-
d:p3365r1
P3365R1


Remove the Deprecated iterator Class Template from C++26
https://wg21.link/p3365r1




Alisdair Meredith
-
d:p3366r0
P3366R0


Remove Deprecated Atomic Initialization API from C++26
https://wg21.link/p3366r0




Alisdair Meredith
-
d:p3366r1
P3366R1


Remove Deprecated Atomic Initialization API from C++26
https://wg21.link/p3366r1




Alisdair Meredith
-
d:p3367r0
P3367R0


constexpr coroutines
https://wg21.link/p3367r0




Hana Dusíková
-
d:p3367r1
P3367R1


constexpr coroutines
https://wg21.link/p3367r1




Hana Dusíková
-
d:p3367r2
P3367R2


constexpr coroutines
https://wg21.link/p3367r2




Hana Dusíková
-
d:p3367r3
P3367R3


constexpr coroutines
https://wg21.link/p3367r3




Hana Dusíková
-
d:p3367r4
P3367R4


constexpr coroutines
https://wg21.link/p3367r4




Hana Dusíková
-
d:p3369r0
P3369R0


constexpr for uninitialized_default_construct
https://wg21.link/p3369r0




Giuseppe D'Angelo
-
d:p3370r0
P3370R0


Add new library headers from C23
https://wg21.link/p3370r0




Jens Maurer
-
d:p3370r1
P3370R1


Add new library headers from C23
https://wg21.link/p3370r1




Jens Maurer
-
d:p3371r0
P3371R0


Fix C++26 by making the symmetric and Hermitian rank-k and rank-2k updates consistent with the BLAS
https://wg21.link/p3371r0




Mark Hoemmen
-
d:p3371r1
P3371R1


Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS
https://wg21.link/p3371r1




Mark Hoemmen, Ilya Burylov
-
d:p3371r2
P3371R2


Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS
https://wg21.link/p3371r2




Mark Hoemmen, Ilya Burylov
-
d:p3371r3
P3371R3


Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS
https://wg21.link/p3371r3




Mark Hoemmen, Ilya Burylov
-
d:p3371r4
P3371R4


Fix C++26 by making the rank-1, rank-2, rank-k, and rank-2k updates consistent with the BLAS
https://wg21.link/p3371r4




Mark Hoemmen, Ilya Burylov
-
d:p3372r0
P3372R0


constexpr containers and adapters
https://wg21.link/p3372r0




Hana Dusíková
-
d:p3372r1
P3372R1


constexpr containers and adapters
https://wg21.link/p3372r1




Hana Dusíková
-
d:p3372r2
P3372R2


constexpr containers and adapters
https://wg21.link/p3372r2




Hana Dusíková
-
d:p3372r3
P3372R3


constexpr containers and adapters
https://wg21.link/p3372r3




Hana Dusíková
-
d:p3373r0
P3373R0


Of Operation States and Their Lifetimes
https://wg21.link/p3373r0




Robert Leahy
-
d:p3373r1
P3373R1


Of Operation States and Their Lifetimes
https://wg21.link/p3373r1




Robert Leahy
-
d:p3374r0
P3374R0


Adding formatter for fpos
https://wg21.link/p3374r0




Liang Jiaming
-
d:p3374r1
P3374R1


Adding formatter for fpos
https://wg21.link/p3374r1




Liang Jiaming
-
d:p3375r0
P3375R0


Reproducible floating-point results
https://wg21.link/p3375r0




Guy Davidson
-
d:p3375r1
P3375R1


Reproducible floating-point results
https://wg21.link/p3375r1




Guy Davidson
-
d:p3375r2
P3375R2


Reproducible floating-point results
https://wg21.link/p3375r2




Guy Davidson
-
d:p3375r3
P3375R3


Reproducible floating-point results
https://wg21.link/p3375r3




Guy Davidson
-
d:p3376r0
P3376R0


Contract assertions versus static analysis and 'safety'
https://wg21.link/p3376r0




Andrzej Krzemieński
-
d:p3378r0
P3378R0


constexpr exception types
https://wg21.link/p3378r0




Hana Dusíková
-
d:p3378r1
P3378R1


constexpr exception types
https://wg21.link/p3378r1




Hana Dusíková
-
d:p3378r2
P3378R2


constexpr exception types
https://wg21.link/p3378r2




Hana Dusíková
-
d:p3379r0
P3379R0


Constrain std::expected equality operators
https://wg21.link/p3379r0




Jonathan Wakely
-
d:p3380r0
P3380R0


Extending support for class types as non-type template parameters
https://wg21.link/p3380r0




Barry Revzin
-
d:p3380r1
P3380R1


Extending support for class types as non-type template parameters
https://wg21.link/p3380r1




Barry Revzin
-
d:p3381r0
P3381R0


Syntax for Reflection
https://wg21.link/p3381r0




Barry Revzin, Wyatt Childers, Peter Dimov, Andrew Sutton, Faisal Vali, Daveed Vandevoorde, Dan Katz
-
d:p3382r0
P3382R0


Coarse clocks and resolutions
https://wg21.link/p3382r0




Antony Polukhin
-
d:p3383r0
P3383R0


mdspan.at()
https://wg21.link/p3383r0




Stephan Lachnit, Xavier Bonaventura
-
d:p3383r1
P3383R1


mdspan.at()
https://wg21.link/p3383r1




Stephan Lachnit, Xavier Bonaventura
-
d:p3383r2
P3383R2


mdspan.at()
https://wg21.link/p3383r2




Stephan Lachnit, Xavier Bonaventura
-
d:p3383r3
P3383R3


mdspan.at()
https://wg21.link/p3383r3




Stephan Lachnit, Xavier Bonaventura
-
d:p3384r0
P3384R0


__COUNTER__
https://wg21.link/p3384r0




Jeremy Rifkin
-
d:p3385r0
P3385R0


Attributes reflection
https://wg21.link/p3385r0




Aurelien Cassagnes, Aurelien Cassagnes, Roman Khoroshikh, Anders Johansson
-
d:p3385r1
P3385R1


Attributes reflection
https://wg21.link/p3385r1




Aurelien Cassagnes, Roman Khoroshikh, Anders Johansson
-
d:p3385r2
P3385R2


Attributes reflection
https://wg21.link/p3385r2




Aurelien Cassagnes, Roman Khoroshikh, Anders Johansson
-
d:p3385r3
P3385R3


Attributes reflection
https://wg21.link/p3385r3




Aurelien Cassagnes, Roman Khoroshikh, Anders Johansson
-
d:p3385r4
P3385R4


Attributes reflection
https://wg21.link/p3385r4




Aurelien Cassagnes
-
d:p3385r5
P3385R5


Attributes reflection
https://wg21.link/p3385r5




Aurelien Cassagnes
-
d:p3386r0
P3386R0


Static Analysis of Contracts with P2900
https://wg21.link/p3386r0




Joshua Berne
-
d:p3386r1
P3386R1


Static Analysis of Contracts with P2900
https://wg21.link/p3386r1




Joshua Berne
-
d:p3387r0
P3387R0


Contract assertions on coroutines
https://wg21.link/p3387r0




Timur Doumler, Joshua Berne, Iain Sandoe, Peter Bindels
-
d:p3388r0
P3388R0


When Do You Know connect Doesn't Throw?
https://wg21.link/p3388r0




Robert Leahy
-
d:p3388r1
P3388R1


When Do You Know connect Doesn't Throw?
https://wg21.link/p3388r1




Robert Leahy
-
d:p3388r2
P3388R2


When Do You Know connect Doesn't Throw?
https://wg21.link/p3388r2




Robert Leahy
-
d:p3389r0
P3389R0


Of Operation States and Their Lifetimes (LEWG Presentation 2024-09-10)
https://wg21.link/p3389r0




Robert Leahy
-
d:p3390r0
P3390R0


Safe C++
https://wg21.link/p3390r0




Sean Baxter, Christian Mazakas
-
d:p3391r0
P3391R0


constexpr std::format
https://wg21.link/p3391r0




Barry Revzin
-
d:p3391r1
P3391R1


constexpr std::format
https://wg21.link/p3391r1




Barry Revzin
-
d:p3392r0
P3392R0


Do not promise support for function syntax of operators
https://wg21.link/p3392r0




Corentin Jabot, Inbal Levi
-
d:p3394r0
P3394R0


Annotations for Reflection
https://wg21.link/p3394r0




Daveed Vandevoorde, Wyatt Childers, Dan Katz,
-
d:p3394r1
P3394R1


Annotations for Reflection
https://wg21.link/p3394r1




Daveed Vandevoorde, Wyatt Childers, Dan Katz, Barry Revzin
-
d:p3394r2
P3394R2


Annotations for Reflection
https://wg21.link/p3394r2




Daveed Vandevoorde, Wyatt Childers, Dan Katz, Barry Revzin
-
d:p3394r3
P3394R3


Annotations for Reflection
https://wg21.link/p3394r3




Daveed Vandevoorde, Wyatt Childers, Dan Katz, Barry Revzin
-
d:p3394r4
P3394R4


Annotations for Reflection
https://wg21.link/p3394r4




Daveed Vandevoorde, Wyatt Childers, Dan Katz, Barry Revzin
-
d:p3395r0
P3395R0


Formatting of std::error_code
https://wg21.link/p3395r0




Victor Zverovich
-
d:p3395r1
P3395R1


Fix encoding issues and add a formatter for std::error_code
https://wg21.link/p3395r1




Victor Zverovich
-
d:p3395r2
P3395R2


Fix encoding issues and add a formatter for std::error_code
https://wg21.link/p3395r2




Victor Zverovich
-
d:p3395r3
P3395R3


Fix encoding issues and add a formatter for std::error_code
https://wg21.link/p3395r3




Victor Zverovich
-
d:p3395r4
P3395R4


Fix encoding issues and add a formatter for std::error_code
https://wg21.link/p3395r4




Victor Zverovich
-
d:p3396r0
P3396R0


std::execution wording fixes
https://wg21.link/p3396r0




Lewis Baker
-
d:p3396r1
P3396R1


std::execution wording fixes
https://wg21.link/p3396r1




Lewis Baker
-
d:p3397r0
P3397R0


Clarify requirements on extended floating point types
https://wg21.link/p3397r0




Hans Boehm
-
d:p3398r0
P3398R0


User specified type decay
https://wg21.link/p3398r0




Bengt Gustafsson
-
d:p3399r0
P3399R0


Adjusting Electronic Polls to a Hybrid Workflow
https://wg21.link/p3399r0




Inbal Levi, Fabio Fracassi, Corentin Jabot, Nevin Liber, Robert Leahy, Khalil Estell
-
d:p3400r0
P3400R0


Specifying Contract Assertion Properties with Labels
https://wg21.link/p3400r0




Joshua Berne
-
d:p3400r1
P3400R1


Specifying Contract Assertion Properties with Labels
https://wg21.link/p3400r1




Joshua Berne
-
d:p3401r0
P3401R0


Enrich Creation Functions for the Pointer-Semantics-Based Polymorphism Library - Proxy
https://wg21.link/p3401r0




Tian Liao, Mingxin Wang
-
d:p3402r0
P3402R0


A Safety Profile Verifying Class Initialization
https://wg21.link/p3402r0




Marc-André Laverdière, Christopher Lapkowski, Charles-Henri Gros
-
d:p3402r1
P3402R1


A Safety Profile Verifying Class Initialization
https://wg21.link/p3402r1




Marc-André Laverdière, Christopher Lapkowski, Charles-Henri Gros
-
d:p3402r2
P3402R2


A Safety Profile Verifying Initialization
https://wg21.link/p3402r2




Marc-André Laverdière, Christopher Lapkowski, Charles-Henri Gros
-
d:p3402r3
P3402R3


A Safety Profile Verifying Initialization
https://wg21.link/p3402r3




Marc-André Laverdière, Christopher Lapkowski, Charles-Henri Gros
-
d:p3403r0
P3403R0


The Undefined Behavior Question
https://wg21.link/p3403r0




Andrew Tomazos
-
d:p3404r0
P3404R0


std::at : Range-checked accesses to arbitrary containers
https://wg21.link/p3404r0




Andre Kostur
-
d:p3405r0
P3405R0


Out-of-order designated initializers
https://wg21.link/p3405r0




Elias Kosunen
-
d:p3406r0
P3406R0


We need better performance testing
https://wg21.link/p3406r0




Bjarne Stroustrup
-
d:p3407r0
P3407R0


Make idiomatic usage of `offsetof` well-defined
https://wg21.link/p3407r0




Brian Bi
-
d:p3407r1
P3407R1


Make idiomatic usage of `offsetof` well-defined
https://wg21.link/p3407r1




Brian Bi
-
d:p3409r0
P3409R0


Enabling more efficient stop-token based cancellation of senders
https://wg21.link/p3409r0




Lewis Baker
-
d:p3409r1
P3409R1


Enabling more efficient stop-token based cancellation of senders
https://wg21.link/p3409r1




Lewis Baker
-
d:p3411r0
P3411R0


`any_view`
https://wg21.link/p3411r0




Hui Xie, S. Levent Yilmaz, Louis Dionne
-
d:p3411r1
P3411R1


`any_view`
https://wg21.link/p3411r1




Hui Xie, S. Levent Yilmaz, Louis Dionne
-
d:p3411r2
P3411R2


`any_view`
https://wg21.link/p3411r2




Hui Xie, S. Levent Yilmaz, Louis Dionne, Patrick Roberts
-
d:p3411r3
P3411R3


`any_view`
https://wg21.link/p3411r3




Hui Xie, S. Levent Yilmaz, Louis Dionne, Patrick Roberts
-
d:p3412r0
P3412R0


String interpolation
https://wg21.link/p3412r0




Bengt Gustafsson, Victor Zverovich
-
d:p3412r1
P3412R1


String interpolation
https://wg21.link/p3412r1




Bengt Gustafsson, Victor Zverovich
-
d:p3412r2
P3412R2


String interpolation
https://wg21.link/p3412r2




Bengt Gustafsson, Victor Zverovich
-
d:p3413r0
P3413R0


A more flexible optional::value_or (else!)
https://wg21.link/p3413r0




Corentin Jabot
-
d:p3415r0
P3415R0


Range interface in std::optional breaks code!
https://wg21.link/p3415r0




Andrzej Krzemieński
-
d:p3416r0
P3416R0


exception_ptr_cast: Add && = delete overload
https://wg21.link/p3416r0




Gor Nishanov
-
d:p3417r0
P3417R0


Improving the handling of exceptions thrown from contract predicates
https://wg21.link/p3417r0




Gašper Ažman, Timur Doumler
-
d:p3417r1
P3417R1


Handling exceptions thrown from contract predicates
https://wg21.link/p3417r1




Gašper Ažman, Timur Doumler
-
d:p3419r0
P3419R0


Reflection Syntax Options Summary
https://wg21.link/p3419r0




Michael Levine
-
d:p3420r0
P3420R0


Reflection of Templates
https://wg21.link/p3420r0




Andrei Alexandrescu, Barry Revzin, Daveed Vandevoorde, Michael Garland
-
d:p3420r1
P3420R1


Reflection of Templates
https://wg21.link/p3420r1




Andrei Alexandrescu, Barry Revzin, Daveed Vandevoorde, Michael Garland
-
d:p3421r0
P3421R0


Consteval destructors
https://wg21.link/p3421r0




Ben Craig
-
d:p3422r0
P3422R0


Allow main function in named modules
https://wg21.link/p3422r0




Chuanqi Xu
-
d:p3422r1
P3422R1


Allow main function in named modules
https://wg21.link/p3422r1




Chuanqi Xu
-
d:p3423r0
P3423R0


Extending User-Generated Diagnostic Messages
https://wg21.link/p3423r0




Yihe Li
-
d:p3423r1
P3423R1


Extending User-Generated Diagnostic Messages
https://wg21.link/p3423r1




Yihe Li
-
d:p3424r0
P3424R0


Define Delete With Throwing Exception Specification
https://wg21.link/p3424r0




Alisdair Meredith
-
d:p3425r0
P3425R0


Reducing operation-state sizes for subobject child operations
https://wg21.link/p3425r0




Lewis Baker
-
d:p3425r1
P3425R1


Reducing operation-state sizes for subobject child operations
https://wg21.link/p3425r1




Lewis Baker
-
d:p3427r0
P3427R0


Hazard Pointer Synchronous Reclamation
https://wg21.link/p3427r0




Maged Michael, Michael Wong, Paul McKenney
-
d:p3427r1
P3427R1


Hazard Pointer Synchronous Reclamation
https://wg21.link/p3427r1




Maged Michael, Michael Wong, Paul McKenney
-
d:p3427r2
P3427R2


Hazard Pointer Synchronous Reclamation
https://wg21.link/p3427r2




Maged Michael, Michael Wong, Paul McKenney
-
d:p3428r0
P3428R0


Hazard Pointer Batches
https://wg21.link/p3428r0




Maged Michael, Michael Wong, Paul McKenney
-
d:p3428r1
P3428R1


Hazard Pointer Batches
https://wg21.link/p3428r1




Maged Michael, Michael Wong, Paul McKenney
-
d:p3428r2
P3428R2


Hazard Pointer Batches
https://wg21.link/p3428r2




Maged Michael, Michael Wong, Paul McKenney
-
d:p3429r0
P3429R0


Reflection header should minimize standard library dependencies
https://wg21.link/p3429r0




Jonathan Müller
-
d:p3429r1
P3429R1


Reflection header should minimize standard library dependencies
https://wg21.link/p3429r1




Jonathan Müller
-
d:p3430r0
P3430R0


simd issues: explicit, unsequenced, identity-element position, and members of disabled simd
https://wg21.link/p3430r0




Matthias Kretz
-
d:p3430r1
P3430R1


simd issues: explicit, unsequenced, identity-element position, and members of disabled simd
https://wg21.link/p3430r1




Matthias Kretz
-
d:p3430r2
P3430R2


simd issues: explicit, unsequenced, identity-element position, and members of disabled simd
https://wg21.link/p3430r2




Matthias Kretz
-
d:p3430r3
P3430R3


simd issues: explicit, unsequenced, identity-element position, and members of disabled simd
https://wg21.link/p3430r3




Matthias Kretz
-
d:p3431r0
P3431R0


Deprecate const-qualifier on begin/end of views
https://wg21.link/p3431r0




Jonathan Müller
-
d:p3433r0
P3433R0


Allocator Support for Operation States
https://wg21.link/p3433r0




Dietmar Kuehl
-
d:p3433r1
P3433R1


Allocator Support for Operation States
https://wg21.link/p3433r1




Dietmar Kuehl
-
d:p3435r0
P3435R0


Reflection and meta-programming
https://wg21.link/p3435r0




Jean-Baptiste VALLON HOARAU, Joel FALCOU
-
d:p3436r0
P3436R0


Strategy for removing safety-related undefined behavior by default
https://wg21.link/p3436r0




Herb Sutter
-
d:p3436r1
P3436R1


Strategy for removing safety-related undefined behavior by default
https://wg21.link/p3436r1




Herb Sutter
-
d:p3437r0
P3437R0


Proposed default principles: Reflect C++, Generate C++
https://wg21.link/p3437r0




Herb Sutter
-
d:p3437r1
P3437R1


Proposed principles: Reflect C++, generate C++ (by default)
https://wg21.link/p3437r1




Herb Sutter
-
d:p3438r0
P3438R0


Make integral overloads of std::to_string constexpr
https://wg21.link/p3438r0




Andreas Fertig
-
d:p3439r0
P3439R0


Chained comparisons: Safe, correct, efficient
https://wg21.link/p3439r0




Herb Sutter
-
d:p3439r1
P3439R1


Chained comparisons: Safe, correct, efficient
https://wg21.link/p3439r1




Herb Sutter
-
d:p3439r2
P3439R2


Chained comparisons: Safe, correct, efficient
https://wg21.link/p3439r2




Herb Sutter
-
d:p3439r3
P3439R3


Chained comparisons: Safe, correct, efficient
https://wg21.link/p3439r3




Herb Sutter
-
d:p3440r0
P3440R0


Add n_elements named constructor to std::simd
https://wg21.link/p3440r0




Daniel Towner
-
d:p3440r1
P3440R1


Add n_elements named constructor to std::simd
https://wg21.link/p3440r1




Daniel Towner
-
d:p3441r0
P3441R0


Rename simd_split to simd_chunk
https://wg21.link/p3441r0




Daniel Towner
-
d:p3441r1
P3441R1


Rename simd_split to simd_chunk
https://wg21.link/p3441r1




Daniel Towner, Ruslan Arutyunyan
-
d:p3441r2
P3441R2


Rename simd_split to simd_chunk
https://wg21.link/p3441r2




Daniel Towner, Ruslan Arutyunyan
-
d:p3442r0
P3442R0


[[invalidate_dereferencing]] attribute
https://wg21.link/p3442r0




Patrice Roy, Nicolas Fleury
-
d:p3442r1
P3442R1


[[invalidate_dereferencing]] attribute
https://wg21.link/p3442r1




Patrice Roy, Nicolas Fleury
-
d:p3442r2
P3442R2


[[invalidate_dereferencing]] attribute
https://wg21.link/p3442r2




Patrice Roy, Nicolas Fleury
-
d:p3443r0
P3443R0


Reflection on SG21 2024 Process
https://wg21.link/p3443r0




Ran Regev
-
d:p3444r0
P3444R0


Memory safety without lifetime parameters
https://wg21.link/p3444r0




Sean Baxter
-
d:p3445r0
P3445R0


Add utilities for easier type/bit casting in std::simd
https://wg21.link/p3445r0




Daniel Towner
-
d:p3446r0
P3446R0


Profile invalidation - eliminating dangling pointers
https://wg21.link/p3446r0




Bjarne Stroustrup
-
d:p3447r0
P3447R0


Profiles syntax
https://wg21.link/p3447r0




Bjarne Stroustrup
-
d:p3449r0
P3449R0


constexpr std::generator
https://wg21.link/p3449r0




Hana Dusíková
-
d:p3449r1
P3449R1


constexpr std::generator
https://wg21.link/p3449r1




Hana Dusíková
-
d:p3450r0
P3450R0


Extending is_within_lifetime
https://wg21.link/p3450r0




Barry Revzin
-
d:p3451r0
P3451R0


A Suggestion for Reflection Access Control
https://wg21.link/p3451r0




Barry Revzin
-
d:p3454r0
P3454R0


Revising Atomic Max/Min Operations
https://wg21.link/p3454r0




Michael Wong, Gonzalo Brito, Fedor Pikus, Maged Michael
-
d:p3455r0
P3455R0


SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2024/6/12-2024/10/9
https://wg21.link/p3455r0




Michael Wong
-
d:p3456r0
P3456R0


system_scheduler on Win32, Darwin and Linux
https://wg21.link/p3456r0




Gor Nishanov
-
d:p3457r0
P3457R0


SG19: Machine Learning virtual Meeting Minutes to 2024/06/13-2024/10/10
https://wg21.link/p3457r0




Michael Wong
-
d:p3460r0
P3460R0


Contracts Implementors Report
https://wg21.link/p3460r0




Eric Fiselier, Nina Dinka Ranns, Iain Sandoe
-
d:p3465r0
P3465R0


Pursue P1179 as a Lifetime TS
https://wg21.link/p3465r0




Herb Sutter
-
d:p3466r0
P3466R0


(Re)affirm design principles for future C++ evolution
https://wg21.link/p3466r0




Herb Sutter
-
d:p3466r1
P3466R1


(Re)affirm design principles for future C++ evolution
https://wg21.link/p3466r1




Herb Sutter
-
d:p3467r0
P3467R0


2024-10 Library Evolution Polls
https://wg21.link/p3467r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3468r0
P3468R0


2024-10 Library Evolution Poll Outcomes
https://wg21.link/p3468r0




Inbal Levi, Fabio Fracassi, Ben Craig, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3469r0
P3469R0


Virtual deducing this
https://wg21.link/p3469r0




Mike Spertus
-
d:p3470r0
P3470R0


Interface-Unit-Only Module Library Support
https://wg21.link/p3470r0




Daniel Ruoso
-
d:p3471r0
P3471R0


Standard library hardening
https://wg21.link/p3471r0




Konstantin Varlamov, Louis Dionne
-
d:p3471r1
P3471R1


Standard Library Hardening
https://wg21.link/p3471r1




Konstantin Varlamov, Louis Dionne
-
d:p3471r2
P3471R2


Standard Library Hardening
https://wg21.link/p3471r2




Konstantin Varlamov, Louis Dionne
-
d:p3471r3
P3471R3


Standard Library Hardening
https://wg21.link/p3471r3




Konstantin Varlamov, Louis Dionne
-
d:p3471r4
P3471R4


Standard Library Hardening
https://wg21.link/p3471r4




Konstantin Varlamov, Louis Dionne
-
d:p3472r0
P3472R0


Make fiber_context::can_resume() const
https://wg21.link/p3472r0




Andrzej Krzemieński
-
d:p3472r1
P3472R1


Make fiber_context::can_resume() const
https://wg21.link/p3472r1




Andrzej Krzemieński
-
d:p3473r0
P3473R0


Splicing Should Respect Access Control
https://wg21.link/p3473r0




Steve Downey
-
d:p3474r0
P3474R0


std::arguments
https://wg21.link/p3474r0




Jeremy Rifkin
-
d:p3475r0
P3475R0


Defang and deprecate memory_order::consume
https://wg21.link/p3475r0




Hans Boehm
-
d:p3475r1
P3475R1


Defang and deprecate memory_order::consume
https://wg21.link/p3475r1




Hans Boehm
-
d:p3475r2
P3475R2


Defang and deprecate memory_order::consume
https://wg21.link/p3475r2




Hans Boehm
-
d:p3476r0
P3476R0


Slides for P2688R2 - Pattern Matching: `match` Expression
https://wg21.link/p3476r0




Michael Park
-
d:p3477r0
P3477R0


There are exactly 8 bits in a byte
https://wg21.link/p3477r0




JF Bastien
-
d:p3477r1
P3477R1


There are exactly 8 bits in a byte
https://wg21.link/p3477r1




JF Bastien
-
d:p3477r2
P3477R2


There are exactly 8 bits in a byte
https://wg21.link/p3477r2




JF Bastien
-
d:p3477r3
P3477R3


There are exactly 8 bits in a byte
https://wg21.link/p3477r3




JF Bastien
-
d:p3477r4
P3477R4


There are exactly 8 bits in a byte
https://wg21.link/p3477r4




JF Bastien
-
d:p3477r5
P3477R5


There are exactly 8 bits in a byte
https://wg21.link/p3477r5




JF Bastien
-
d:p3478r0
P3478R0


Constification should not be part of the MVP
https://wg21.link/p3478r0




John Spicer
-
d:p3479r0
P3479R0


Enabling C pragma support in C++
https://wg21.link/p3479r0




Joshua Cranmer
-
d:p3480r0
P3480R0


std::simd is a range
https://wg21.link/p3480r0




Matthias Kretz
-
d:p3480r1
P3480R1


std::simd is a range
https://wg21.link/p3480r1




Matthias Kretz
-
d:p3480r2
P3480R2


std::simd is a range
https://wg21.link/p3480r2




Matthias Kretz
-
d:p3480r3
P3480R3


std::simd is a range
https://wg21.link/p3480r3




Matthias Kretz
-
d:p3480r4
P3480R4


std::simd is a range
https://wg21.link/p3480r4




Matthias Kretz
-
d:p3480r5
P3480R5


std::simd is a range
https://wg21.link/p3480r5




Matthias Kretz
-
d:p3480r6
P3480R6


std::simd is a range
https://wg21.link/p3480r6




Matthias Kretz
-
d:p3481r0
P3481R0


Summarizing std::execution::bulk() issues
https://wg21.link/p3481r0




Lucian Radu Teodorescu, Lewis Baker, Ruslan Arutyunyan
-
d:p3481r1
P3481R1


std::execution::bulk() issues
https://wg21.link/p3481r1




Lucian Radu Teodorescu, Ruslan Arutyunyan, Lewis Baker
-
d:p3481r2
P3481R2


std::execution::bulk() issues
https://wg21.link/p3481r2




Lucian Radu Teodorescu, Ruslan Arutyunyan, Lewis Baker
-
d:p3481r3
P3481R3


std::execution::bulk() issues
https://wg21.link/p3481r3




Lucian Radu Teodorescu, Ruslan Arutyunyan, Lewis Baker, Mark Hoemmen
-
d:p3481r4
P3481R4


std::execution::bulk() issues
https://wg21.link/p3481r4




Lucian Radu Teodorescu, Ruslan Arutyunyan, Lewis Baker, Mark Hoemmen
-
d:p3481r5
P3481R5


std::execution::bulk() issues
https://wg21.link/p3481r5




Lucian Radu Teodorescu, Ruslan Arutyunyan, Lewis Baker, Mark Hoemmen
-
d:p3482r0
P3482R0


Proposed API for creating TAPS based networking connections
https://wg21.link/p3482r0




Thomas W Rodgers, Dietmar Kuhl
-
d:p3482r1
P3482R1


Design for C++ networking based on IETF TAPS
https://wg21.link/p3482r1




Thomas Rodgers, Woven By Toyota, thomas.rodgers@woven-planet.global, Dietmar Kühl, Bloomberg, dkuhl@bloomberg.net
-
d:p3483r0
P3483R0


Contracts for C++: Pre-Wroclaw technical clarifications
https://wg21.link/p3483r0




Timur Doumler, Joshua Berne
-
d:p3483r1
P3483R1


Contracts for C++: Pre-Wroclaw technical clarifications
https://wg21.link/p3483r1




Timur Doumler, Joshua Berne
-
d:p3484r0
P3484R0


Postconditions odr-using a parameter modified in an overriding function
https://wg21.link/p3484r0




Timur Doumler, Joshua Berne
-
d:p3484r1
P3484R1


Postconditions odr-using a parameter modified in an overriding function
https://wg21.link/p3484r1




Timur Doumler, Joshua Berne
-
d:p3484r2
P3484R2


Postconditions odr-using a parameter modified in an overriding function
https://wg21.link/p3484r2




Timur Doumler, Joshua Berne
-
d:p3485r0
P3485R0


Grouping using declarations with braces
https://wg21.link/p3485r0




Barry Revzin
-
d:p3487r0
P3487R0


Postconditions odr-using a parameter that may be passed in registers
https://wg21.link/p3487r0




Timur Doumler, Joshua Berne
-
d:p3488r0
P3488R0


Floating-Point Excess Precision
https://wg21.link/p3488r0




Matthias Kretz
-
d:p3488r1
P3488R1


Floating-Point Excess Precision
https://wg21.link/p3488r1




Matthias Kretz
-
d:p3489r0
P3489R0


Postconditions odr-using a parameter of dependent type
https://wg21.link/p3489r0




Timur Doumler, Joshua Berne
-
d:p3490r0
P3490R0


Justification for ranges as the output of parallel range algorithms
https://wg21.link/p3490r0




Alexey Kukanov, Ruslan Arutyunyan
-
d:p3491r0
P3491R0


define_static_{string,object,array}
https://wg21.link/p3491r0




Barry Revzin, Peter Dimov, Daveed Vandevoorde, Dan Katz
-
d:p3491r1
P3491R1


define_static_{string,object,array}
https://wg21.link/p3491r1




Barry Revzin, Wyatt Childers, Peter Dimov, Daveed Vandevoorde
-
d:p3491r2
P3491R2


define_static_{string,object,array}
https://wg21.link/p3491r2




Barry Revzin, Wyatt Childers, Peter Dimov, Daveed Vandevoorde
-
d:p3491r3
P3491R3


define_static_{string,object,array}
https://wg21.link/p3491r3




Barry Revzin, Wyatt Childers, Peter Dimov, Daveed Vandevoorde
-
d:p3492r0
P3492R0


Sized deallocation for placement new
https://wg21.link/p3492r0




Lauri Vasama
-
d:p3492r1
P3492R1


Sized deallocation for placement new
https://wg21.link/p3492r1




Lauri Vasama
-
d:p3492r2
P3492R2


Sized deallocation for placement new
https://wg21.link/p3492r2




Lauri Vasama
-
d:p3493r0
P3493R0


Ruminations on reflection and access
https://wg21.link/p3493r0




Ville Voutilainen
-
d:p3495r0
P3495R0


Remarks on Basic Statistics, P1708R9
https://wg21.link/p3495r0




Oliver Rosten, Mark Hoemmen
-
d:p3496r0
P3496R0


Immediate-Escalating Expressions
https://wg21.link/p3496r0




Barry Revzin
-
d:p3497r0
P3497R0


Guarded Objects
https://wg21.link/p3497r0




Jan Wilmans
-
d:p3498r0
P3498R0


Stop the Bleeding but, First, Do No Harm
https://wg21.link/p3498r0




Gabriel Dos Reis, Thomas Wise; Zachary Henkel
-
d:p3499r0
P3499R0


Exploring strict contract predicates
https://wg21.link/p3499r0




Lisa Lippincott, Timur Doumler, Joshua Berne
-
d:p3499r1
P3499R1


Exploring strict contract predicates
https://wg21.link/p3499r1




Timur Doumler, Lisa Lippincott, Joshua Berne
-
d:p3500r0
P3500R0


Are Contracts "safe"?
https://wg21.link/p3500r0




Timur Doumler, Gašper Ažman, Joshua Berne
-
d:p3500r1
P3500R1


Are Contracts "safe"?
https://wg21.link/p3500r1




Timur Doumler, Gašper Ažman, Joshua Berne, Ryan McDougall
-
d:p3501r0
P3501R0


The ad-dressing of cats
https://wg21.link/p3501r0




S. Davis Herring
-
d:p3502r0
P3502R0


Slides for D2900R11 - Contracts for C++
https://wg21.link/p3502r0




Timur Doumler
-
d:p3503r0
P3503R0


Make type-erased allocator use in promise and packaged_task consistent
https://wg21.link/p3503r0




Nicolas Morales, Jonathan Wakely
-
d:p3503r1
P3503R1


Make type-erased allocator use in promise and packaged_task consistent
https://wg21.link/p3503r1




Nicolas Morales, Jonathan Wakely
-
d:p3503r2
P3503R2


Make type-erased allocator use in promise and packaged_task consistent
https://wg21.link/p3503r2




Nicolas Morales, Jonathan Wakely
-
d:p3503r3
P3503R3


Make type-erased allocator use in promise and packaged_task consistent
https://wg21.link/p3503r3




Nicolas Morales, Jonathan Wakely
-
d:p3504r0
P3504R0


C++ Standard Library Ready Issues to be moved in Wroclaw, Nov. 2024
https://wg21.link/p3504r0




Jonathan Wakely
-
d:p3505r0
P3505R0


Fix the default floating-point representation in std::format
https://wg21.link/p3505r0




Victor Zverovich, Junekey Jeon
-
d:p3506r0
P3506R0


P2900 Is Still not Ready for C++26
https://wg21.link/p3506r0




Gabriel Dos Reis
-
d:p3508r0
P3508R0


Wording for constexpr for specialized memory algorithms
https://wg21.link/p3508r0




Giuseppe D'Angelo, Michael Schellenberger Costa
-
d:p3510r0
P3510R0


Leftover properties of `this` in constructor preconditions
https://wg21.link/p3510r0




Nathan Myers, Gašper Ažman
-
d:p3510r1
P3510R1


Leftover properties of `this` in constructor preconditions
https://wg21.link/p3510r1




Nathan Myers, Gašper Ažman
-
d:p3510r2
P3510R2


Leftover properties of `this` in constructor preconditions
https://wg21.link/p3510r2




Nathan Myers, Gašper Ažman
-
d:p3514r0
P3514R0


"RFC 3514: The Security Flag" for C++
https://wg21.link/p3514r0




Steve Downey
-
d:p3516r0
P3516R0


Uninitialized algorithms for relocation
https://wg21.link/p3516r0




Louis Dionne, Giuseppe D’Angelo
-
d:p3516r1
P3516R1


Uninitialized algorithms for relocation
https://wg21.link/p3516r1




Louis Dionne, Giuseppe D’Angelo
-
d:p3516r2
P3516R2


Uninitialized algorithms for relocation
https://wg21.link/p3516r2




Louis Dionne, Giuseppe D’Angelo
-
d:p3517r0
P3517R0


Slides presented to LEWG on trivial relocation in Wroclaw
https://wg21.link/p3517r0




Alisdair Meredith
-
d:p3518r0
P3518R0


Slides for Standardized Constexpr Type Ordering
https://wg21.link/p3518r0




Gašper Ažman
-
d:p3519r0
P3519R0


Slides for P3425 presentation to LEWG
https://wg21.link/p3519r0




Lewis Baker
-
d:p3520r0
P3520R0


Wroclaw Technical Fixes to Contracts
https://wg21.link/p3520r0




Timur Doumler, Joshua Berne, Andrzej Krzemieński
-
d:p3521r0
P3521R0


Pattern Matching: Customization Point for Open Sum Types
https://wg21.link/p3521r0




Michael Park, Zach Laine
-
d:p3524r0
P3524R0


Core Language Working Group "ready" Issues for the November, 2024 meeting
https://wg21.link/p3524r0




Jens Maurer
-
d:p3525r0
P3525R0


Explicit Implicit Template Regions
https://wg21.link/p3525r0




Barry Revzin
-
d:p3526r0
P3526R0


Container truncation
https://wg21.link/p3526r0




Peter Bindels, Eric Fiselier
-
d:p3527r0
P3527R0


Pattern Matching: *variant-like* and `std::expected`
https://wg21.link/p3527r0




Michael Park, Zach Laine
-
d:p3527r1
P3527R1


Pattern Matching: *variant-like* and `std::expected`
https://wg21.link/p3527r1




Michael Park, Zach Laine
-
d:p3530r0
P3530R0


Intrinsic for reading uninitialized memory
https://wg21.link/p3530r0




Boleyn Su, Gašper Ažman
-
d:p3533r0
P3533R0


constexpr virtual inheritance
https://wg21.link/p3533r0




Hana Dusíková
-
d:p3533r1
P3533R1


constexpr virtual inheritance
https://wg21.link/p3533r1




Hana Dusíková
-
d:p3533r2
P3533R2


constexpr virtual inheritance
https://wg21.link/p3533r2




Hana Dusíková
-
d:p3534r0
P3534R0


Avoid UB When Compiling Code That Violates Library Specification
https://wg21.link/p3534r0




Alisdair Meredith
-
d:p3537r0
P3537R0


Presentation on Concurrent Queue API LEWG Telecon 2024-Dec-10
https://wg21.link/p3537r0




Detlef Vollmann
-
d:p3537r1
P3537R1


Presentation on Concurrent Queue API
https://wg21.link/p3537r1




Detlef Vollmann
-
d:p3539r1
P3539R1


Consistent Function Label Naming for Sections
https://wg21.link/p3539r1




Paweł Benetkiewicz
-
d:p3540r0
P3540R0


#embed Parameter offset
https://wg21.link/p3540r0




JeanHeyd Meneide
-
d:p3540r1
P3540R1


#embed Parameter offset
https://wg21.link/p3540r1




JeanHeyd Meneide
-
d:p3540r2
P3540R2


#embed Parameter offset
https://wg21.link/p3540r2




JeanHeyd Meneide
-
d:p3541r0
P3541R0


Violation handlers vs `noexcept`
https://wg21.link/p3541r0




Andrzej Krzemieński
-
d:p3541r1
P3541R1


Violation handlers vs `noexcept`
https://wg21.link/p3541r1




Andrzej Krzemieński
-
d:p3542r0
P3542R0


Abolish the term "converting constructor"
https://wg21.link/p3542r0




Brian Bi
-
d:p3543r0
P3543R0


Response to Core Safety Profiles (P3081)
https://wg21.link/p3543r0




Mungo Gill, Corentin Jabot, John Lakos, Joshua Berne, Timur Doumler
-
d:p3544r0
P3544R0


ranges::to view
https://wg21.link/p3544r0




Hewill Kang
-
d:p3546r0
P3546R0


Explicit return type deduction for std::numeric_limits and numbers
https://wg21.link/p3546r0




Thomas Mejstrik
-
d:p3547r0
P3547R0


Modeling Access Control With Reflection
https://wg21.link/p3547r0




Dan Katz, Ville Voutilainen
-
d:p3547r1
P3547R1


Modeling Access Control With Reflection
https://wg21.link/p3547r1




Dan Katz, Ville Voutilainen
-
d:p3548r0
P3548R0


P1030 `std::filesystem::path_view` forward progress options
https://wg21.link/p3548r0




Niall Douglas
-
d:p3549r0
P3549R0


Diverging expressions
https://wg21.link/p3549r0




Barry Revzin, Michael Park, Zach Laine, Bruno Cardoso Lopes
-
d:p3550r0
P3550R0


Imports cannot ...
https://wg21.link/p3550r0




Alisdair Meredith
-
d:p3552r0
P3552R0


Add a Coroutine Lazy Type
https://wg21.link/p3552r0




Dietmar Kühl, Maikel Nadolski
-
d:p3552r1
P3552R1


Add a Coroutine Task Type
https://wg21.link/p3552r1




Dietmar Kühl, Maikel Nadolski
-
d:p3552r2
P3552R2


Add a Coroutine Task Type
https://wg21.link/p3552r2




Dietmar Kühl, Maikel Nadolski
-
d:p3552r3
P3552R3


Add a Coroutine Task Type
https://wg21.link/p3552r3




Dietmar Kühl, Maikel Nadolski
-
d:p3554r0
P3554R0


Non-transient allocation with vector and basic_string
https://wg21.link/p3554r0




Barry Revzin, Peter Dimov
-
d:p3555r0
P3555R0


An infinite range concept
https://wg21.link/p3555r0




Jonathan Müller
-
d:p3556r0
P3556R0


Input files are source files
https://wg21.link/p3556r0




Alisdair Meredith
-
d:p3556r1
P3556R1


Input files are source files
https://wg21.link/p3556r1




Alisdair Meredith, Lori Hughes
-
d:p3557r0
P3557R0


High-Quality Sender Diagnostics with Constexpr Exceptions
https://wg21.link/p3557r0




Eric Niebler
-
d:p3557r1
P3557R1


High-Quality Sender Diagnostics with Constexpr Exceptions
https://wg21.link/p3557r1




Eric Niebler
-
d:p3557r2
P3557R2


High-Quality Sender Diagnostics with Constexpr Exceptions
https://wg21.link/p3557r2




Eric Niebler
-
d:p3557r3
P3557R3


High-Quality Sender Diagnostics with Constexpr Exceptions
https://wg21.link/p3557r3




Eric Niebler
-
d:p3558r0
P3558R0


Core Language Contracts By Default
https://wg21.link/p3558r0




Joshua Berne, John Lakos
-
d:p3558r1
P3558R1


Core Language Contracts By Default
https://wg21.link/p3558r1




Joshua Berne, John Lakos
-
d:p3559r0
P3559R0


Trivial relocation: One trait or two?
https://wg21.link/p3559r0




Arthur O'Dwyer
-
d:p3560r0
P3560R0


Error Handling in Reflection
https://wg21.link/p3560r0




Barry Revzin, Peter Dimov
-
d:p3560r1
P3560R1


Error Handling in Reflection
https://wg21.link/p3560r1




Barry Revzin, Peter Dimov
-
d:p3560r2
P3560R2


Error Handling in Reflection
https://wg21.link/p3560r2




Barry Revzin, Peter Dimov
-
d:p3561r0
P3561R0


Index based coproduct operations on variant, and library wording
https://wg21.link/p3561r0




Esa Pulkkinen
-
d:p3561r1
P3561R1


Index based coproduct operations on variant, and library wording
https://wg21.link/p3561r1




Esa Pulkkinen
-
d:p3561r2
P3561R2


Index based coproduct operations on variant, and library wording
https://wg21.link/p3561r2




Esa Pulkkinen
-
d:p3564r0
P3564R0


Make the concurrent forward progress guarantee usable in `bulk`
https://wg21.link/p3564r0




Mark Hoemmen, Bryce Adelstein Lelbach,Michael Garland
-
d:p3565r0
P3565R0


Virtual floating-point values
https://wg21.link/p3565r0




S. Davis Herring
-
d:p3565r1
P3565R1


Virtual floating-point values
https://wg21.link/p3565r1




S. Davis Herring
-
d:p3566r0
P3566R0


You shall not pass `char*` - Safety concerns working with unbounded null-terminated strings
https://wg21.link/p3566r0




Marco Foco
-
d:p3566r1
P3566R1


You shall not pass `char*` - Safety concerns working with unbounded null-terminated strings
https://wg21.link/p3566r1




Marco Foco
-
d:p3566r2
P3566R2


You shall not pass `char*` - Safety concerns working with unbounded null-terminated strings
https://wg21.link/p3566r2




Marco Foco, Joshua Kriegshauser, Alexey Shevlyakov, Giuseppe D'Angelo
-
d:p3567r0
P3567R0


`flat_meow` Fixes
https://wg21.link/p3567r0




Hui Xie, Louis Dionne, Arthur O'Dwyer
-
d:p3568r0
P3568R0


break label; and continue label;
https://wg21.link/p3568r0




Jan Schultke, Sarah Quiñones
-
d:p3568r1
P3568R1


break label; and continue label;
https://wg21.link/p3568r1




Jan Schultke
-
d:p3569r0
P3569R0


Split define_aggregate from Reflection
https://wg21.link/p3569r0




Shafik Yaghmour, Aaron Ballman, Erich Keane, Corentin Jabot, Vlad Serebrennikov
-
d:p3570r0
P3570R0


optional variants in sender/receiver
https://wg21.link/p3570r0




Fabio Fracassi
-
d:p3570r1
P3570R1


optional variants in sender/receiver
https://wg21.link/p3570r1




Fabio Fracassi
-
d:p3570r2
P3570R2


optional variants in sender/receiver
https://wg21.link/p3570r2




Fabio Fracassi
-
d:p3572r0
P3572R0


Pattern matching
https://wg21.link/p3572r0




Bjarne Stroustrup
-
d:p3573r0
P3573R0


Contract concerns
https://wg21.link/p3573r0




Bjarne Stroustrup, Michael Hava, J. Daniel Garcia Sanchez, Ran Regev, Gabriel Dos Reis, John Spicer, J.C. van Winkel, David Vandevoorde, Ville Voutilainen
-
d:p3574r0
P3574R0


Constexpr Callables
https://wg21.link/p3574r0




Steve Downey
-
d:p3575r0
P3575R0


SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2024/11/13
https://wg21.link/p3575r0




Michael Wong
-
d:p3576r0
P3576R0


SG19: Machine Learning virtual Meeting Minutes to 2024/11/14-2024/12/12
https://wg21.link/p3576r0




Michael Wong
-
d:p3577r0
P3577R0


Require a non-throwing default contract-violation handler
https://wg21.link/p3577r0




John Lakos
-
d:p3578r0
P3578R0


Language Safety and Grandma Safety
https://wg21.link/p3578r0




Ryan McDougall
-
d:p3579r0
P3579R0


Fix matching of non-type template parameters when matching template template parameters
https://wg21.link/p3579r0




Matheus Izvekov
-
d:p3579r1
P3579R1


Fix matching of non-type template parameters when matching template template parameters
https://wg21.link/p3579r1




Matheus Izvekov
-
d:p3580r0
P3580R0


The Naming of Things
https://wg21.link/p3580r0




Alan Talbot
-
d:p3581r0
P3581R0


No, inplace_vector shouldn't have an Allocator
https://wg21.link/p3581r0




Nevin Liber
-
d:p3582r0
P3582R0


Observed a contract violation? Skip subsequent assertions!
https://wg21.link/p3582r0




Andrzej Krzemieński
-
d:p3583r0
P3583R0


Contracts, Types & Functions
https://wg21.link/p3583r0




Jonas Persson
-
d:p3584r0
P3584R0


Enrich Facade Creation Facilities for the Pointer-Semantics-Based Polymorphism Library - Proxy
https://wg21.link/p3584r0




Mingxin Wang
-
d:p3585r0
P3585R0


allocator_traits::is_internally_relocatable
https://wg21.link/p3585r0




Pablo Halpern
-
d:p3586r0
P3586R0


The Plethora of Problems With Profiles
https://wg21.link/p3586r0




Corentin Jabot
-
d:p3587r0
P3587R0


Reconsider reflection access for C++26
https://wg21.link/p3587r0




Lauri Vasama
-
d:p3588r0
P3588R0


Allow static data members in local and unnamed classes
https://wg21.link/p3588r0




Brian Bi
-
d:p3588r1
P3588R1


Allow static data members in local and unnamed classes
https://wg21.link/p3588r1




Brian Bi
-
d:p3589r0
P3589R0


C++ Profiles: The Framework
https://wg21.link/p3589r0




Gabriel Dos Reis
-
d:p3589r1
P3589R1


C++ Profiles: The Framework
https://wg21.link/p3589r1




Gabriel Dos Reis
-
d:p3589r2
P3589R2


C++ Profiles: The Framework
https://wg21.link/p3589r2




Gabriel Dos Reis
-
d:p3590r0
P3590R0


Constexpr Coroutines Burdens
https://wg21.link/p3590r0




Daveed Vandevoorde
-
d:p3591r0
P3591R0


Contextualizing Contracts Concerns
https://wg21.link/p3591r0




Joshua Berne, Timur Doumler
-
d:p3592r0
P3592R0


Resolving Concerns with const-ification
https://wg21.link/p3592r0




Joshua Berne, Timur Doumler
-
d:p3599r0
P3599R0


Initial Implicit Contract Assertions
https://wg21.link/p3599r0




Joshua Berne, Timur Doumler
-
d:p3601r0
P3601R0


Slides for P3407R1
https://wg21.link/p3601r0




Brian Bi
-
d:p3603r0
P3603R0


Consteval-only Values and Consteval Variables
https://wg21.link/p3603r0




Barry Revzin
-
d:p3605r0
P3605R0


isqrt: A function to calculate integer square root of the nonnegative integer
https://wg21.link/p3605r0




Nikita Sakharin
-
d:p3606r0
P3606R0


On Overload Resolution, Exact Matches and Clever Implementations
https://wg21.link/p3606r0




Corentin Jabot, Younan Zhang
-
d:p3608r0
P3608R0


Contracts and profiles: what can we reasonably ship in C++26
https://wg21.link/p3608r0




Ville Voutilainen
-
d:p3611r0
P3611R0


Dealing with pointer errors: Separating static and dynamic checking
https://wg21.link/p3611r0




Bjarne Stroustrup
-
d:p3613r0
P3613R0


On the beating of horses, and other matters
https://wg21.link/p3613r0




Tim Song
-
d:p3614r0
P3614R0


Do not remove nor postpone access_context::unchecked
https://wg21.link/p3614r0




Ville Voutilainen
-
d:p3615r0
P3615R0


C++ Standard Library Ready Issues to be moved in Hagenberg, Feb. 2025
https://wg21.link/p3615r0




Jonathan Wakely
-
d:p3616r0
P3616R0


Remove contracts on virtual functions for now
https://wg21.link/p3616r0




Ville Voutilainen
-
d:p3617r0
P3617R0


std::meta::reflect_constant_{array,string}
https://wg21.link/p3617r0




Barry Revzin
-
d:p3618r0
P3618R0


Allow attaching main to the global module
https://wg21.link/p3618r0




Michael Spencer
-
d:p3619r0
P3619R0


Counter-examples for P2688R5
https://wg21.link/p3619r0




Vlad Serebrennikov, Tymofii Kutlov, Sergey Anisimov
-
d:p3619r1
P3619R1


Counter-examples for P2688R5
https://wg21.link/p3619r1




Vlad Serebrennikov, Tymofii Kutlov, Sergey Anisimov
-
d:p3620r0
P3620R0


Concerns with the proposed addition of fibers to C++ 26
https://wg21.link/p3620r0




David Chisnall, Matthew Taylor
-
d:p3623r0
P3623R0


Add noexcept to [iterator.range] (LWG 3537)
https://wg21.link/p3623r0




Arthur O'Dwyer
-
d:p3625r0
P3625R0


either neither
https://wg21.link/p3625r0




Michael Florian Hava
-
d:p3626r0
P3626R0


Make predicate exceptions propagate by default
https://wg21.link/p3626r0




Timur Doumler
-
d:p3627r0
P3627R0


Easy-to-adopt security profiles for preventing RCE (remote code execution) in existing C++ code
https://wg21.link/p3627r0




Ulfar Erlingsson
-
d:p3628r0
P3628R0


break label; and continue label;, tl; dr
https://wg21.link/p3628r0




Jan Schultke
-
d:p3630r0
P3630R0


Slides for P3568R0
https://wg21.link/p3630r0




Jan Schultke
-
d:p3631r0
P3631R0


Cleaning up the trivial relocation APIs in C++26
https://wg21.link/p3631r0




Louis Dionne, Giuseppe D’Angelo
-
d:p3632r0
P3632R0


P3564R0: Make the concurrent forward progress guarantee usable in bulk
https://wg21.link/p3632r0




Mark Hoemmen
-
d:p3632r1
P3632R1


P3564R0: Make the concurrent forward progress guarantee usable in bulk
https://wg21.link/p3632r1




Mark Hoemmen
-
d:p3633r0
P3633R0


A Byte is a Byte
https://wg21.link/p3633r0




Murat Can Cagri
-
d:p3635r0
P3635R0


We shouldn't rush to require either CHAR_BIT==8 or (u)intNN_t
https://wg21.link/p3635r0




Nevin Liber
-
d:p3636r0
P3636R0


LEWG Hagenberg presentation for P3581 No, inplace_vector shouldn't have an Allocator
https://wg21.link/p3636r0




Nevin Liber
-
d:p3637r0
P3637R0


Inherit std::meta::exception from std::exception
https://wg21.link/p3637r0




Victor Zverovich, Nevin Liber, Michael Hava
-
d:p3638r0
P3638R0


Core Language Working Group "ready" Issues for the February, 2025 meeting
https://wg21.link/p3638r0




Jens Maurer
-
d:p3639r0
P3639R0


The _BitInt Debate
https://wg21.link/p3639r0




Jan Schultke
-
d:p3640r0
P3640R0


Make contracts reliable by default
https://wg21.link/p3640r0




Jonas Persson
-
d:p3641r0
P3641R0


Rename std::observable to std::observable_checkpoint, and add a feature-test macro
https://wg21.link/p3641r0




Jan Schultke
-
d:p3642r0
P3642R0


Carry-less product: std::clmul
https://wg21.link/p3642r0




Jan Schultke
-
d:p3642r1
P3642R1


Carry-less product: std::clmul
https://wg21.link/p3642r1




Jan Schultke
-
d:p3642r2
P3642R2


Carry-less product: std::clmul
https://wg21.link/p3642r2




Jan Schultke
-
d:p3643r0
P3643R0


std::to_signed and std::to_unsigned
https://wg21.link/p3643r0




Jan Schultke
-
d:p3643r1
P3643R1


std::to_signed and std::to_unsigned
https://wg21.link/p3643r1




Jan Schultke
-
d:p3647r0
P3647R0


Slides for P3642R1
https://wg21.link/p3647r0




Jan Schultke
-
d:p3649r0
P3649R0


A principled approach to safety profiles
https://wg21.link/p3649r0




Jonathan Müller
-
d:p3650r0
P3650R0


21st Century C++
https://wg21.link/p3650r0




Bjarne Stroustrup
-
d:p3651r0
P3651R0


Note to the C++ standards committee members
https://wg21.link/p3651r0




Bjarne Stroustrup
-
d:p3652r0
P3652R0


Constexpr floating-point <charconv> functions
https://wg21.link/p3652r0




Lénárd Szolnoki
-
d:p3652r1
P3652R1


Constexpr floating-point <charconv> functions
https://wg21.link/p3652r1




Lénárd Szolnoki
-
d:p3654r0
P3654R0


Slides for P3516
https://wg21.link/p3654r0




Giuseppe D'Angelo, Louis Dionne
-
d:p3655r0
P3655R0


zstring_view
https://wg21.link/p3655r0




Peter Bindels, Hana Dusikova, Jeremy Rifkin
-
d:p3655r1
P3655R1


zstring_view
https://wg21.link/p3655r1




Peter Bindels, Hana Dusikova, Jeremy Rifkin
-
d:p3655r2
P3655R2


zstring_view
https://wg21.link/p3655r2




Peter Bindels, Hana Dusikova, Jeremy Rifkin, Marco Foco, Alexey Shevlyakov
-
d:p3656r0
P3656R0


Initial draft proposal for core language UB white paper: Process and major work items
https://wg21.link/p3656r0




Herb Sutter, Gašper Ažman
-
d:p3656r1
P3656R1


Initial draft proposal for core language UB white paper: Process and major work items
https://wg21.link/p3656r1




Herb Sutter, Gašper Ažman
-
d:p3657r0
P3657R0


A Grammar for Whitespace Characters
https://wg21.link/p3657r0




Alisdair Meredith
-
d:p3658r0
P3658R0


Adjust identifier following new Unicode recommendations
https://wg21.link/p3658r0




Robin Leroy
-
d:p3658r1
P3658R1


Adjust identifier following new Unicode recommendations
https://wg21.link/p3658r1




Robin Leroy
-
d:p3660r0
P3660R0


Improve `reference_wrapper` Ergonomics
https://wg21.link/p3660r0




Jeremy Rifkin
-
d:p3661r0
P3661R0


Attributes, annotations, labels
https://wg21.link/p3661r0




Andrzej Krzemieński
-
d:p3662r0
P3662R0


Improve Increment and Decrement Operator Syntax
https://wg21.link/p3662r0




Jeremy Rifkin
-
d:p3663r0
P3663R0


Future-proof `submdspan-mapping`?
https://wg21.link/p3663r0




Mark Hoemmen
-
d:p3663r1
P3663R1


Future-proof `submdspan-mapping`
https://wg21.link/p3663r1




Mark Hoemmen
-
d:p3663r2
P3663R2


Future-proof `submdspan-mapping`
https://wg21.link/p3663r2




Mark Hoemmen
-
d:p3664r0
P3664R0


Make variant_size SFINAE friendly
https://wg21.link/p3664r0




Zach Laine
-
d:p3665r0
P3665R0


Vertical Text Processing
https://wg21.link/p3665r0




Jeremy Rifkin, Levi de koning
-
d:p3667r0
P3667R0


Extending range-for loop with an expression statement
https://wg21.link/p3667r0




Jose Daniel Garcia
-
d:p3668r0
P3668R0


Defaulting Postfix Increment and Decrement Operations
https://wg21.link/p3668r0




Matthew Taylor, Alex
-
d:p3668r1
P3668R1


Defaulting Postfix Increment and Decrement Operations
https://wg21.link/p3668r1




Matthew Taylor, Alex
-
d:p3668r2
P3668R2


Defaulting Postfix Increment and Decrement Operations
https://wg21.link/p3668r2




Matthew Taylor, Alex (Waffl3x)
-
d:p3669r0
P3669R0


Non-Blocking Support for `std::execution`
https://wg21.link/p3669r0




Detlef Vollmann
-
d:p3669r1
P3669R1


Non-Blocking Support for `std::execution`
https://wg21.link/p3669r1




Detlef Vollmann
-
d:p3669r2
P3669R2


Non-Blocking Support for `std::execution`
https://wg21.link/p3669r2




Detlef Vollmann
-
d:p3670r0
P3670R0


Pack Indexing for Template Names
https://wg21.link/p3670r0




Corentin Jabot
-
d:p3670r1
P3670R1


Pack Indexing for Template Names
https://wg21.link/p3670r1




Corentin Jabot
-
d:p3671r0
P3671R0


Clarifying the interaction of the literal and execution encodings
https://wg21.link/p3671r0




Corentin Jabot
-
d:p3672r0
P3672R0


On Windows, Systems APIs, Text Encodings, and Pragmatism
https://wg21.link/p3672r0




Corentin Jabot
-
d:p3676r0
P3676R0


Enhanced inline Keyword with Configurable Inlining Levels
https://wg21.link/p3676r0




Stephen Berry, Khalil Estell
-
d:p3677r0
P3677R0


Preserving LC_CTYPE at program start for UTF-8 locales
https://wg21.link/p3677r0




Corentin Jabot
-
d:p3678r0
P3678R0


Arbitrary attributes in define_aggregate
https://wg21.link/p3678r0




Aurelien Cassagnes
-
d:p3679r0
P3679R0


SFINAEable constexpr exceptions
https://wg21.link/p3679r0




Hana Dusíková
-
d:p3681r0
P3681R0


char_traits: Stop the bleeding
https://wg21.link/p3681r0




Corentin Jabot
-
d:p3682r0
P3682R0


Remove std::execution::split
https://wg21.link/p3682r0




Robert Leahy
-
d:p3685r0
P3685R0


Rename async_scope_token
https://wg21.link/p3685r0




Robert Leahy
-
d:p3686r0
P3686R0


Allow named modules to export macros
https://wg21.link/p3686r0




Chuanqi Xu
-
d:p3687r0
P3687R0


Final Adjustments to C++26 Reflection
https://wg21.link/p3687r0




Dan Katz, Wyatt Childers, Daveed Vandevoorde, Ville Voutilainen
-
d:p3687r1
P3687R1


Final Adjustments to C++26 Reflection
https://wg21.link/p3687r1




Dan Katz, Wyatt Childers, Daveed Vandevoorde, Ville Voutilainen
-
d:p3688r0
P3688R0


ASCII character utilities
https://wg21.link/p3688r0




Jan Schultke, Corentin Jabot
-
d:p3688r1
P3688R1


ASCII character utilities
https://wg21.link/p3688r1




Jan Schultke, Corentin Jabot
-
d:p3688r2
P3688R2


ASCII character utilities
https://wg21.link/p3688r2




Jan Schultke, Corentin Jabot
-
d:p3689r0
P3689R0


Convenience functions for Random number generation
https://wg21.link/p3689r0




Thomas Mejstrik
-
d:p3690r0
P3690R0


Consistency fix: Make simd reductions SIMD-generic
https://wg21.link/p3690r0




Olaf Krzikalla, Matthias Kretz
-
d:p3690r1
P3690R1


Consistency fix: Make simd reductions SIMD-generic
https://wg21.link/p3690r1




Olaf Krzikalla, Matthias Kretz
-
d:p3691r0
P3691R0


Reconsider naming of the namespace for “std::simd”
https://wg21.link/p3691r0




Matthias Kretz, Abhilash Majumder, Bryce Adelstein Lelbach, Daniel Towner, Ilya Burylov, Mark Hoemmen, Ruslan Arutyunyan
-
d:p3691r1
P3691R1


Reconsider naming of the namespace for "std::simd"
https://wg21.link/p3691r1




Matthias Kretz, Abhilash Majumder, Bryce Adelstein Lelbach, Daniel Towner, Ilya Burylov, Mark Hoemmen, Ruslan Arutyunyan
-
d:p3692r0
P3692R0


How to Avoid OOTA Without Really Trying
https://wg21.link/p3692r0




Paul E. McKenney, Alan Stern, Michael Wong, and Maged Michael
-
d:p3692r1
P3692R1


How to Avoid OOTA Without Really Trying
https://wg21.link/p3692r1




Paul E. McKenney, Alan Stern, Michael Wong, and Maged Michael
-
d:p3692r2
P3692R2


How to Avoid OOTA Without Really Trying
https://wg21.link/p3692r2




Paul E. McKenney, Alan Stern, Michael Wong, Maged Michael, and Gonzalo Brito
-
d:p3693r0
P3693R0


SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2025/04/09-2025/05/07
https://wg21.link/p3693r0




Michael Wong
-
d:p3694r0
P3694R0


SG19: Machine Learning virtual Meeting Minutes to 2025/03/13-2025/05/08
https://wg21.link/p3694r0




Michael Wong
-
d:p3695r0
P3695R0


Deprecate implicit conversions between Unicode character types
https://wg21.link/p3695r0




Jan Schultke
-
d:p3696r0
P3696R0


Discovering Header Units via Module Maps
https://wg21.link/p3696r0




Michael Spencer
-
d:p3697r0
P3697R0


Minor additions to C++26 standard library hardening
https://wg21.link/p3697r0




Konstantin Varlamov, Louis Dionne, Alisdair Meredith
-
d:p3697r1
P3697R1


Minor additions to C++26 standard library hardening
https://wg21.link/p3697r1




Konstantin Varlamov, Louis Dionne, Alisdair Meredith
-
d:p3698r0
P3698R0


Cross-capacity comparisons for inplace_vector
https://wg21.link/p3698r0




Charles Hussong
-
d:p3699r0
P3699R0


Rename `conqueue_errc`
https://wg21.link/p3699r0




Detlef Vollmann
-
d:p3699r1
P3699R1


Rename `conqueue_errc`
https://wg21.link/p3699r1




Detlef Vollmann
-
d:p3700r0
P3700R0


Making Safe C++ happen
https://wg21.link/p3700r0




Peter Bindels
-
d:p3701r0
P3701R0


Concepts for integer types, not integral types
https://wg21.link/p3701r0




Jan Schultke
-
d:p3702r0
P3702R0


Stricter requirements for document submissions (SD-7)
https://wg21.link/p3702r0




Jan Schultke
-
d:p3702r1
P3702R1


Stricter requirements for document submissions (SD-7)
https://wg21.link/p3702r1




Jan Schultke
-
d:p3703r0
P3703R0


Constness and Locking
https://wg21.link/p3703r0




Yoaodan Zhang, Alec Cepeda, Alexander Buzanis, Charlie Sabino, Cory Turnbaugh, Guanduo Mu, Hongli Zhao, Joneskim Kimo, Matthias Zajdela, Mitch Verhelle, Pierr-Yves Sojic, Steven Arellana, Roshan Surabhi, Wei Cai, Mike Spertus
-
d:p3704r0
P3704R0


What are profiles?
https://wg21.link/p3704r0




Bjarne Stroustrup
-
d:p3705r0
P3705R0


A Sentinel for Null-Terminated Strings
https://wg21.link/p3705r0




Eddie Nolan
-
d:p3705r1
P3705R1


A Sentinel for Null-Terminated Strings
https://wg21.link/p3705r1




Eddie Nolan
-
d:p3705r2
P3705R2


A Sentinel for Null-Terminated Strings
https://wg21.link/p3705r2




Eddie Nolan
-
d:p3706r0
P3706R0


Rename join and nest in async_scope proposal
https://wg21.link/p3706r0




Ruslan Arutyunyan, Ville Voutilainen
-
d:p3707r0
P3707R0


A std::is_always_exhaustive trait
https://wg21.link/p3707r0




Patrice Roy, Gregoire Angerand
-
d:p3709r0
P3709R0


Reconsider parallel ranges::rotate_copy and ranges::reverse_copy
https://wg21.link/p3709r0




Ruslan Arutyunyan, Alexey Kukanov
-
d:p3709r1
P3709R1


Reconsider parallel ranges::rotate_copy and ranges::reverse_copy
https://wg21.link/p3709r1




Ruslan Arutyunyan, Alexey Kukanov
-
d:p3709r2
P3709R2


Reconsider parallel ranges::rotate_copy and ranges::reverse_copy
https://wg21.link/p3709r2




Ruslan Arutyunyan, Alexey Kukanov
-
d:p3710r0
P3710R0


zstring_view: a string_view with guaranteed null termination
https://wg21.link/p3710r0




Alexey Shevlyakov, Marco Foco, Joshua Krieghauser
-
d:p3711r0
P3711R0


Safer StringViewLike Functions for Replacing char* strings
https://wg21.link/p3711r0




Marco Foco, Alexey Shevlyakov, Joshua Kriegshauser
-
d:p3711r1
P3711R1


Safer StringViewLike Functions for Replacing char* strings
https://wg21.link/p3711r1




Marco Foco, Alexey Shevlyakov, Joshua Kriegshauser
-
d:p3712r0
P3712R0


2025-05 Library Evolution Polls
https://wg21.link/p3712r0




Inbal Levi, Fabio Fracassi, Andreas Weis, Billy Baker, Nevin Liber, Corentin Jabot
-
d:p3713r0
P3713R0


2025-05 Library Evolution Poll Outcomes
https://wg21.link/p3713r0




Inbal Levi, Fabio Fracassi, Andreas Weis, Nevin Liber, Billy Baker, Corentin Jabot
-
d:p3714r0
P3714R0


Virtual values have Virtual Value
https://wg21.link/p3714r0




Joshua Cranmer
-
d:p3715r0
P3715R0


Tightening floating-point semantics for C++
https://wg21.link/p3715r0




Joshua Cranmer
-
d:p3716r0
P3716R0


Subsetting
https://wg21.link/p3716r0




Peter Bindels
-
d:p3717r0
P3717R0


Update Annex E onto Unicode 16
https://wg21.link/p3717r0




Steve Downey
-
d:p3718r0
P3718R0


Fixing Lazy Sender Algorithm Customization, Again
https://wg21.link/p3718r0




Eric Niebler
-
d:p3719r0
P3719R0


std::is_vector_bool_reference
https://wg21.link/p3719r0




Yuxuan Chen
-
d:p3719r1
P3719R1


std::is_vector_bool_reference
https://wg21.link/p3719r1




Yuxuan Chen
-
d:p3721r0
P3721R0


Slides for P3639R0
https://wg21.link/p3721r0




Jan Schultke
-
d:p3722r0
P3722R0


Slides for P3568R1
https://wg21.link/p3722r0




Jan Schultke
-
d:p3724r0
P3724R0


Integer division
https://wg21.link/p3724r0




Jan Schultke
-
d:p3725r0
P3725R0


Filter View Extensions for Input Ranges
https://wg21.link/p3725r0




Nicolai Josuttis
-
d:p3725r1
P3725R1


Filter View Extensions for Input Ranges
https://wg21.link/p3725r1




Nicolai Josuttis
-
d:p3726r0
P3726R0


Adjustments to Union Lifetime Rules
https://wg21.link/p3726r0




Barry Revzin, Tomasz Kamiński
-
d:p3727r0
P3727R0


Update Annex E based on Unicode 15.1 UAX #31
https://wg21.link/p3727r0




Steve Downey
-
d:p3729r0
P3729R0


Aligning span and string_view
https://wg21.link/p3729r0




Michael Florian Hava
-
d:p3730r0
P3730R0


Slides for P3104R3
https://wg21.link/p3730r0




Jan Schultke
-
d:p3731r0
P3731R0


#embed Preprocessor Parameter Order
https://wg21.link/p3731r0




JeanHeyd Meneide
-
d:p3732r0
P3732R0


Numeric Range Algorithms
https://wg21.link/p3732r0




Ruslan Arutyunyan, Mark Hoemmen, Alexey Kukanov, Bryce Adelstein Lelbach, Abhilash Majumder
-
d:p3733r0
P3733R0


More named universal character escapes
https://wg21.link/p3733r0




Jan Schultke
-
d:p3734r0
P3734R0


Not all predicates must be regular
https://wg21.link/p3734r0




Jan Schultke
-
d:p3735r0
P3735R0


partial_sort_n, nth_element_n
https://wg21.link/p3735r0




Jan Schultke
-
d:p3736r0
P3736R0


Slides against P2971R3 - No implication for C++
https://wg21.link/p3736r0




Jan Schultke
-
d:p3737r0
P3737R0


std::array is a wrapper for an array!
https://wg21.link/p3737r0




Jan Schultke
-
d:p3738r0
P3738R0


Make std::make_from_tuple SFINAE friendly
https://wg21.link/p3738r0




Yihan Wang
-
d:p3739r0
P3739R0


Standard Library Hardening - using std::optional
https://wg21.link/p3739r0




Jarrad J Waterloo
-
d:p3739r1
P3739R1


Standard Library Hardening - using std::optional
https://wg21.link/p3739r1




Jarrad J Waterloo
-
d:p3739r2
P3739R2


Standard Library Hardening - using std::optional
https://wg21.link/p3739r2




Jarrad J Waterloo
-
d:p3740r0
P3740R0


Last chance to fix std::nontype
https://wg21.link/p3740r0




Jan Schultke
-
d:p3740r1
P3740R1


Last chance to fix std::nontype
https://wg21.link/p3740r1




Jan Schultke, Bronek Kozicki
-
d:p3741r0
P3741R0


views::set_operations
https://wg21.link/p3741r0




Hewill Kang
-
d:p3742r0
P3742R0


C++ Standard Library Ready Issues to be moved in Sofia, Jun. 2025
https://wg21.link/p3742r0




Jonathan Wakely
-
d:p3745r0
P3745R0


Rebuttal to P1144R13
https://wg21.link/p3745r0




Pablo Halpern
-
d:p3746r0
P3746R0


LEWG Slides for P3637R0 Inherit std::meta::exception from std::exception
https://wg21.link/p3746r0




Nevin Liber, Victor Zverovich, Michael Hava
-
d:p3747r0
P3747R0


Call side return type deduction
https://wg21.link/p3747r0




Thomas Mejstrik
-
d:p3748r0
P3748R0


Inspecting exception_ptr works should be constexpr.
https://wg21.link/p3748r0




Hana Dusíková
-
d:p3749r0
P3749R0


Slides in response to P3655R2 - Concerns regarding std::zstring_view
https://wg21.link/p3749r0




Jan Schultke
-
d:p3752r0
P3752R0


Core Language Working Group "ready" Issues for the June, 2025 meeting
https://wg21.link/p3752r0




Jens Maurer
-
d:p3753r0
P3753R0


Slides for P3740R0 - Last chance to fix std::nontype
https://wg21.link/p3753r0




Jan Schultke
-
d:p3753r1
P3753R1


Slides for P3740R1 - Last chance to fix std::nontype
https://wg21.link/p3753r1




Jan Schultke
-
d:p3754r0
P3754R0


Slides for P3100R2 presentation to EWG
https://wg21.link/p3754r0




Timur Doumler
-
d:p3757r0
P3757R0


Remove value-type invocability requirement from indirect unary callable concepts
https://wg21.link/p3757r0




Hewill Kang
-
d:p3760r0
P3760R0


Presentation: constexpr 'Parallel' Algorithms
https://wg21.link/p3760r0




Oliver Rosten
-
d:p3763r0
P3763R0


Remove redundant reserve_hint members from view classes
https://wg21.link/p3763r0




Hewill Kang
-
d:p3764r0
P3764R0


A utility function for propagating the most significant bit
https://wg21.link/p3764r0




Jan Schultke
-
d:p3765r0
P3765R0


Deprecate implicit conversion from bool to character types
https://wg21.link/p3765r0




Jan Schultke, Hana Dusíková
-
d:p3769r0
P3769R0


Clarification of placement new deallocation
https://wg21.link/p3769r0




Lauri Vasama
-
d:p3771r0
P3771R0


constexpr mutex, locks, and condition variable
https://wg21.link/p3771r0




Hana Dusíková
-
d:p3772r0
P3772R0


std::simd overloads for bit permutations
https://wg21.link/p3772r0




Jan Schultke
-
d:p3774r0
P3774R0


Rename std::nontype, and make it broadly useful
https://wg21.link/p3774r0




Jan Schultke, Bronek Kozicki, Tomasz Kamiński
-
d:p3774r1
P3774R1


Rename std::nontype, and make it broadly useful
https://wg21.link/p3774r1




Jan Schultke, Bronek Kozicki, Tomasz Kamiński
-
d:p3775r0
P3775R0


Slides for P3774R0 - Rename std::nontype
https://wg21.link/p3775r0




Jan Schultke, Bronek Kozicki, Tomasz Kamiński
-
d:p3778r0
P3778R0


Fixing `type_order` template definition
https://wg21.link/p3778r0




Gašper Ažman
-
d:p3779r0
P3779R0


reserve() and capacity() for flat containers
https://wg21.link/p3779r0




Nicolai Josuttis
-
d:p3780r0
P3780R0


Detecting bitwise trivially relocatable types
https://wg21.link/p3780r0




Giuseppe D'Angelo
-
d:p3781r0
P3781R0


is_*_type should imply is_type
https://wg21.link/p3781r0




Xavier Bonaventura
-
d:p3784r0
P3784R0


range-if
https://wg21.link/p3784r0




Michael Florian Hava
-
d:p3785r0
P3785R0


Library Wording Changes for Defaulted Postfix Increment and Decrement Operators
https://wg21.link/p3785r0




Matthew Taylor, Alex (Waffl3x)
-
d:p3787r0
P3787R0


Adjoints to "Enabling list-initialization for algorithms": uninitialized_fill
https://wg21.link/p3787r0




Giuseppe D'Angelo
-
d:p3788r0
P3788R0


Fixing `std::complex` binary operators
https://wg21.link/p3788r0




Mateusz Pusz
-
d:p3790r0
P3790R0


Pointer lifetime-end zap proposed solutions: Bag-of-bits pointer class
https://wg21.link/p3790r0




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, JF Bastien, and Daniel Krügler.
-
d:p3790r1
P3790R1


Pointer lifetime-end zap proposed solutions: Bag-of-bits pointer class
https://wg21.link/p3790r1




Paul E. McKenney, Maged Michael, Jens Maurer, Peter Sewell, Hans Boehm, Hubert Tong, Niall Douglas, Thomas Rodgers, Will Deacon, Michael Wong, David Goldblatt, Kostya Serebryany, Anthony Williams, Tom Scogland, JF Bastien, Daniel Krügler, and David Tenty
-
d:p3791r0
P3791R0


constexpr deterministic random
https://wg21.link/p3791r0




Hana Dusíková
-
d:p3792r0
P3792R0


Why `constant_wrapper` is not a usable replacement for `nontype`
https://wg21.link/p3792r0




Bronek Kozicki
-
d:p3793r0
P3793R0


Better shifting
https://wg21.link/p3793r0




Brian Bi, Jan Schultke
-
d:p3794r0
P3794R0


An idea or two on renaming the nontype tag
https://wg21.link/p3794r0




Zhihao Yuan
-
d:p3795r0
P3795R0


Miscellaneous Reflection Cleanup
https://wg21.link/p3795r0




Barry Revzin
-
d:p3796r0
P3796R0


Coroutine Task Issues
https://wg21.link/p3796r0




Dietmar Kühl
-
d:p3796r1
P3796R1


Coroutine Task Issues
https://wg21.link/p3796r1




Dietmar Kühl
-
d:p3798r0
P3798R0


The unexpected in std::expected
https://wg21.link/p3798r0




Alex Kremer, Ayaz Salikhov
-
d:p3798r1
P3798R1


The unexpected in std::expected
https://wg21.link/p3798r1




Alex Kremer, Ayaz Salikhov
-
d:p3799r0
P3799R0


2025-07 Library Evolution Polls
https://wg21.link/p3799r0




Inbal Levi, Fabio Fracassi, Andreas Weis, Billy Baker, Nevin Liber, Corentin Jabot
-
d:p3801r0
P3801R0


Concerns about the design of std::execution::task
https://wg21.link/p3801r0




Jonathan Müller
-
d:p3802r0
P3802R0


Poor Functions
https://wg21.link/p3802r0




Daveed Vandevoorde
-
d:p3806r0
P3806R0


views::cycle
https://wg21.link/p3806r0




Hewill Kang
-
d:p3809r0
P3809R0


Should we make std::linalg reductions deduce return types like fold algorithms?
https://wg21.link/p3809r0




Mark Hoemmen
-
d:p3810r0
P3810R0


hardened memory safety guarantees
https://wg21.link/p3810r0




Jarrad J Waterloo
-
